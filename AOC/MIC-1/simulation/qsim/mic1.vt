// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/13/2024 17:08:59"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPU_vlg_sample_tst(
	CLOCK,
	DATA_MEM_IN,
	LOADN,
	PROG_MEM_IN,
	sampler_tx
);
input  CLOCK;
input [31:0] DATA_MEM_IN;
input  LOADN;
input [7:0] PROG_MEM_IN;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK or DATA_MEM_IN or LOADN or PROG_MEM_IN)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CPU_vlg_check_tst (
	A,
	B,
	C,
	DATA_MEM_ADDR,
	DATA_MEM_OUT,
	DATA_MEM_write_enable,
	MBR_OUT,
	MIR,
	MPC,
	PC,
	sampler_rx
);
input [31:0] A;
input [31:0] B;
input [31:0] C;
input [31:0] DATA_MEM_ADDR;
input [31:0] DATA_MEM_OUT;
input  DATA_MEM_write_enable;
input [7:0] MBR_OUT;
input [35:0] MIR;
input [8:0] MPC;
input [31:0] PC;
input sampler_rx;

reg [31:0] A_expected;
reg [31:0] B_expected;
reg [31:0] C_expected;
reg [31:0] DATA_MEM_ADDR_expected;
reg [31:0] DATA_MEM_OUT_expected;
reg  DATA_MEM_write_enable_expected;
reg [7:0] MBR_OUT_expected;
reg [35:0] MIR_expected;
reg [8:0] MPC_expected;
reg [31:0] PC_expected;

reg [31:0] A_prev;
reg [31:0] B_prev;
reg [31:0] C_prev;
reg [31:0] DATA_MEM_ADDR_prev;
reg [31:0] DATA_MEM_OUT_prev;
reg  DATA_MEM_write_enable_prev;
reg [7:0] MBR_OUT_prev;
reg [35:0] MIR_prev;
reg [8:0] MPC_prev;
reg [31:0] PC_prev;

reg [31:0] A_expected_prev;
reg [31:0] B_expected_prev;
reg [31:0] C_expected_prev;
reg [31:0] DATA_MEM_ADDR_expected_prev;
reg [31:0] DATA_MEM_OUT_expected_prev;
reg  DATA_MEM_write_enable_expected_prev;
reg [7:0] MBR_OUT_expected_prev;
reg [35:0] MIR_expected_prev;
reg [8:0] MPC_expected_prev;
reg [31:0] PC_expected_prev;

reg [31:0] last_A_exp;
reg [31:0] last_B_exp;
reg [31:0] last_C_exp;
reg [31:0] last_DATA_MEM_ADDR_exp;
reg [31:0] last_DATA_MEM_OUT_exp;
reg  last_DATA_MEM_write_enable_exp;
reg [7:0] last_MBR_OUT_exp;
reg [35:0] last_MIR_exp;
reg [8:0] last_MPC_exp;
reg [31:0] last_PC_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_prev = A;
	B_prev = B;
	C_prev = C;
	DATA_MEM_ADDR_prev = DATA_MEM_ADDR;
	DATA_MEM_OUT_prev = DATA_MEM_OUT;
	DATA_MEM_write_enable_prev = DATA_MEM_write_enable;
	MBR_OUT_prev = MBR_OUT;
	MIR_prev = MIR;
	MPC_prev = MPC;
	PC_prev = PC;
end

// update expected /o prevs

always @(trigger)
begin
	A_expected_prev = A_expected;
	B_expected_prev = B_expected;
	C_expected_prev = C_expected;
	DATA_MEM_ADDR_expected_prev = DATA_MEM_ADDR_expected;
	DATA_MEM_OUT_expected_prev = DATA_MEM_OUT_expected;
	DATA_MEM_write_enable_expected_prev = DATA_MEM_write_enable_expected;
	MBR_OUT_expected_prev = MBR_OUT_expected;
	MIR_expected_prev = MIR_expected;
	MPC_expected_prev = MPC_expected;
	PC_expected_prev = PC_expected;
end


// expected PC[ 31 ]
initial
begin
	PC_expected[31] = 1'b0;
	PC_expected[31] = #1690094 1'b1;
end 
// expected PC[ 30 ]
initial
begin
	PC_expected[30] = 1'b0;
	PC_expected[30] = #1690334 1'b1;
end 
// expected PC[ 29 ]
initial
begin
	PC_expected[29] = 1'b0;
	PC_expected[29] = #1690754 1'b1;
end 
// expected PC[ 28 ]
initial
begin
	PC_expected[28] = 1'b0;
	PC_expected[28] = #1690480 1'b1;
end 
// expected PC[ 27 ]
initial
begin
	PC_expected[27] = 1'b0;
	PC_expected[27] = #1689745 1'b1;
end 
// expected PC[ 26 ]
initial
begin
	PC_expected[26] = 1'b0;
	PC_expected[26] = #1690015 1'b1;
end 
// expected PC[ 25 ]
initial
begin
	PC_expected[25] = 1'b0;
	PC_expected[25] = #1690169 1'b1;
end 
// expected PC[ 24 ]
initial
begin
	PC_expected[24] = 1'b0;
	PC_expected[24] = #1691000 1'b1;
end 
// expected PC[ 23 ]
initial
begin
	PC_expected[23] = 1'b0;
	PC_expected[23] = #1691331 1'b1;
end 
// expected PC[ 22 ]
initial
begin
	PC_expected[22] = 1'b0;
	PC_expected[22] = #1690917 1'b1;
end 
// expected PC[ 21 ]
initial
begin
	PC_expected[21] = 1'b0;
	PC_expected[21] = #1690024 1'b1;
end 
// expected PC[ 20 ]
initial
begin
	PC_expected[20] = 1'b0;
	PC_expected[20] = #1690397 1'b1;
end 
// expected PC[ 19 ]
initial
begin
	PC_expected[19] = 1'b0;
	PC_expected[19] = #1690209 1'b1;
end 
// expected PC[ 18 ]
initial
begin
	PC_expected[18] = 1'b0;
	PC_expected[18] = #1689991 1'b1;
end 
// expected PC[ 17 ]
initial
begin
	PC_expected[17] = 1'b0;
	PC_expected[17] = #1690192 1'b1;
end 
// expected PC[ 16 ]
initial
begin
	PC_expected[16] = 1'b0;
	PC_expected[16] = #1691450 1'b1;
end 
// expected PC[ 15 ]
initial
begin
	PC_expected[15] = 1'b0;
	PC_expected[15] = #1690207 1'b1;
end 
// expected PC[ 14 ]
initial
begin
	PC_expected[14] = 1'b0;
	PC_expected[14] = #1690605 1'b1;
end 
// expected PC[ 13 ]
initial
begin
	PC_expected[13] = 1'b0;
	PC_expected[13] = #1689959 1'b1;
end 
// expected PC[ 12 ]
initial
begin
	PC_expected[12] = 1'b0;
	PC_expected[12] = #1690496 1'b1;
end 
// expected PC[ 11 ]
initial
begin
	PC_expected[11] = 1'b0;
	PC_expected[11] = #1689710 1'b1;
end 
// expected PC[ 10 ]
initial
begin
	PC_expected[10] = 1'b0;
	PC_expected[10] = #1690313 1'b1;
end 
// expected PC[ 9 ]
initial
begin
	PC_expected[9] = 1'b0;
	PC_expected[9] = #1691217 1'b1;
end 
// expected PC[ 8 ]
initial
begin
	PC_expected[8] = 1'b0;
	PC_expected[8] = #1690317 1'b1;
end 
// expected PC[ 7 ]
initial
begin
	PC_expected[7] = 1'b0;
end 
// expected PC[ 6 ]
initial
begin
	PC_expected[6] = 1'b0;
	PC_expected[6] = #1690473 1'b1;
end 
// expected PC[ 5 ]
initial
begin
	PC_expected[5] = 1'b0;
end 
// expected PC[ 4 ]
initial
begin
	PC_expected[4] = 1'b0;
	PC_expected[4] = #1689440 1'b1;
end 
// expected PC[ 3 ]
initial
begin
	PC_expected[3] = 1'b0;
	PC_expected[3] = #1690378 1'b1;
end 
// expected PC[ 2 ]
initial
begin
	PC_expected[2] = 1'b0;
	PC_expected[2] = #790018 1'b1;
end 
// expected PC[ 1 ]
initial
begin
	PC_expected[1] = 1'b0;
	PC_expected[1] = #390410 1'b1;
	PC_expected[1] = #400000 1'b0;
	PC_expected[1] = #1100000 1'b1;
end 
// expected PC[ 0 ]
initial
begin
	PC_expected[0] = 1'b0;
	PC_expected[0] = #190544 1'b1;
	PC_expected[0] = #200000 1'b0;
	PC_expected[0] = #200000 1'b1;
	PC_expected[0] = #200000 1'b0;
	PC_expected[0] = #600000 1'b1;
	PC_expected[0] = #500000 1'b0;
end 
// expected DATA_MEM_ADDR[ 31 ]
initial
begin
	DATA_MEM_ADDR_expected[31] = 1'b0;
	DATA_MEM_ADDR_expected[31] = #494456 1'b1;
end 
// expected DATA_MEM_ADDR[ 30 ]
initial
begin
	DATA_MEM_ADDR_expected[30] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 29 ]
initial
begin
	DATA_MEM_ADDR_expected[29] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 28 ]
initial
begin
	DATA_MEM_ADDR_expected[28] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 27 ]
initial
begin
	DATA_MEM_ADDR_expected[27] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 26 ]
initial
begin
	DATA_MEM_ADDR_expected[26] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 25 ]
initial
begin
	DATA_MEM_ADDR_expected[25] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 24 ]
initial
begin
	DATA_MEM_ADDR_expected[24] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 23 ]
initial
begin
	DATA_MEM_ADDR_expected[23] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 22 ]
initial
begin
	DATA_MEM_ADDR_expected[22] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 21 ]
initial
begin
	DATA_MEM_ADDR_expected[21] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 20 ]
initial
begin
	DATA_MEM_ADDR_expected[20] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 19 ]
initial
begin
	DATA_MEM_ADDR_expected[19] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 18 ]
initial
begin
	DATA_MEM_ADDR_expected[18] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 17 ]
initial
begin
	DATA_MEM_ADDR_expected[17] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 16 ]
initial
begin
	DATA_MEM_ADDR_expected[16] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 15 ]
initial
begin
	DATA_MEM_ADDR_expected[15] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 14 ]
initial
begin
	DATA_MEM_ADDR_expected[14] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 13 ]
initial
begin
	DATA_MEM_ADDR_expected[13] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 12 ]
initial
begin
	DATA_MEM_ADDR_expected[12] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 11 ]
initial
begin
	DATA_MEM_ADDR_expected[11] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 10 ]
initial
begin
	DATA_MEM_ADDR_expected[10] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 9 ]
initial
begin
	DATA_MEM_ADDR_expected[9] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 8 ]
initial
begin
	DATA_MEM_ADDR_expected[8] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 7 ]
initial
begin
	DATA_MEM_ADDR_expected[7] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 6 ]
initial
begin
	DATA_MEM_ADDR_expected[6] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 5 ]
initial
begin
	DATA_MEM_ADDR_expected[5] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 4 ]
initial
begin
	DATA_MEM_ADDR_expected[4] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 3 ]
initial
begin
	DATA_MEM_ADDR_expected[3] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 2 ]
initial
begin
	DATA_MEM_ADDR_expected[2] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 1 ]
initial
begin
	DATA_MEM_ADDR_expected[1] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 0 ]
initial
begin
	DATA_MEM_ADDR_expected[0] = 1'b0;
	DATA_MEM_ADDR_expected[0] = #494883 1'b1;
	DATA_MEM_ADDR_expected[0] = #400000 1'b0;
end 
// expected DATA_MEM_OUT[ 31 ]
initial
begin
	DATA_MEM_OUT_expected[31] = 1'b0;
end 
// expected DATA_MEM_OUT[ 30 ]
initial
begin
	DATA_MEM_OUT_expected[30] = 1'b0;
end 
// expected DATA_MEM_OUT[ 29 ]
initial
begin
	DATA_MEM_OUT_expected[29] = 1'b0;
end 
// expected DATA_MEM_OUT[ 28 ]
initial
begin
	DATA_MEM_OUT_expected[28] = 1'b0;
end 
// expected DATA_MEM_OUT[ 27 ]
initial
begin
	DATA_MEM_OUT_expected[27] = 1'b0;
end 
// expected DATA_MEM_OUT[ 26 ]
initial
begin
	DATA_MEM_OUT_expected[26] = 1'b0;
end 
// expected DATA_MEM_OUT[ 25 ]
initial
begin
	DATA_MEM_OUT_expected[25] = 1'b0;
end 
// expected DATA_MEM_OUT[ 24 ]
initial
begin
	DATA_MEM_OUT_expected[24] = 1'b0;
end 
// expected DATA_MEM_OUT[ 23 ]
initial
begin
	DATA_MEM_OUT_expected[23] = 1'b0;
end 
// expected DATA_MEM_OUT[ 22 ]
initial
begin
	DATA_MEM_OUT_expected[22] = 1'b0;
end 
// expected DATA_MEM_OUT[ 21 ]
initial
begin
	DATA_MEM_OUT_expected[21] = 1'b0;
end 
// expected DATA_MEM_OUT[ 20 ]
initial
begin
	DATA_MEM_OUT_expected[20] = 1'b0;
end 
// expected DATA_MEM_OUT[ 19 ]
initial
begin
	DATA_MEM_OUT_expected[19] = 1'b0;
end 
// expected DATA_MEM_OUT[ 18 ]
initial
begin
	DATA_MEM_OUT_expected[18] = 1'b0;
end 
// expected DATA_MEM_OUT[ 17 ]
initial
begin
	DATA_MEM_OUT_expected[17] = 1'b0;
end 
// expected DATA_MEM_OUT[ 16 ]
initial
begin
	DATA_MEM_OUT_expected[16] = 1'b0;
end 
// expected DATA_MEM_OUT[ 15 ]
initial
begin
	DATA_MEM_OUT_expected[15] = 1'b0;
end 
// expected DATA_MEM_OUT[ 14 ]
initial
begin
	DATA_MEM_OUT_expected[14] = 1'b0;
end 
// expected DATA_MEM_OUT[ 13 ]
initial
begin
	DATA_MEM_OUT_expected[13] = 1'b0;
end 
// expected DATA_MEM_OUT[ 12 ]
initial
begin
	DATA_MEM_OUT_expected[12] = 1'b0;
end 
// expected DATA_MEM_OUT[ 11 ]
initial
begin
	DATA_MEM_OUT_expected[11] = 1'b0;
end 
// expected DATA_MEM_OUT[ 10 ]
initial
begin
	DATA_MEM_OUT_expected[10] = 1'b0;
end 
// expected DATA_MEM_OUT[ 9 ]
initial
begin
	DATA_MEM_OUT_expected[9] = 1'b0;
end 
// expected DATA_MEM_OUT[ 8 ]
initial
begin
	DATA_MEM_OUT_expected[8] = 1'b0;
end 
// expected DATA_MEM_OUT[ 7 ]
initial
begin
	DATA_MEM_OUT_expected[7] = 1'b0;
end 
// expected DATA_MEM_OUT[ 6 ]
initial
begin
	DATA_MEM_OUT_expected[6] = 1'b0;
end 
// expected DATA_MEM_OUT[ 5 ]
initial
begin
	DATA_MEM_OUT_expected[5] = 1'b0;
end 
// expected DATA_MEM_OUT[ 4 ]
initial
begin
	DATA_MEM_OUT_expected[4] = 1'b0;
end 
// expected DATA_MEM_OUT[ 3 ]
initial
begin
	DATA_MEM_OUT_expected[3] = 1'b0;
end 
// expected DATA_MEM_OUT[ 2 ]
initial
begin
	DATA_MEM_OUT_expected[2] = 1'b0;
end 
// expected DATA_MEM_OUT[ 1 ]
initial
begin
	DATA_MEM_OUT_expected[1] = 1'b0;
end 
// expected DATA_MEM_OUT[ 0 ]
initial
begin
	DATA_MEM_OUT_expected[0] = 1'b0;
end 
// expected MBR_OUT[ 7 ]
initial
begin
	MBR_OUT_expected[7] = 1'b0;
	MBR_OUT_expected[7] = #688328 1'b1;
	MBR_OUT_expected[7] = #800000 1'b0;
end 
// expected MBR_OUT[ 6 ]
initial
begin
	MBR_OUT_expected[6] = 1'b0;
	MBR_OUT_expected[6] = #888262 1'b1;
	MBR_OUT_expected[6] = #900000 1'b0;
end 
// expected MBR_OUT[ 5 ]
initial
begin
	MBR_OUT_expected[5] = 1'b0;
	MBR_OUT_expected[5] = #888752 1'b1;
	MBR_OUT_expected[5] = #600000 1'b0;
end 
// expected MBR_OUT[ 4 ]
initial
begin
	MBR_OUT_expected[4] = 1'b0;
	MBR_OUT_expected[4] = #288564 1'b1;
	MBR_OUT_expected[4] = #200000 1'b0;
	MBR_OUT_expected[4] = #200000 1'b1;
	MBR_OUT_expected[4] = #1100000 1'b0;
end 
// expected MBR_OUT[ 3 ]
initial
begin
	MBR_OUT_expected[3] = 1'b0;
	MBR_OUT_expected[3] = #688037 1'b1;
	MBR_OUT_expected[3] = #1100000 1'b0;
end 
// expected MBR_OUT[ 2 ]
initial
begin
	MBR_OUT_expected[2] = 1'b0;
	MBR_OUT_expected[2] = #888633 1'b1;
	MBR_OUT_expected[2] = #600000 1'b0;
end 
// expected MBR_OUT[ 1 ]
initial
begin
	MBR_OUT_expected[1] = 1'b0;
	MBR_OUT_expected[1] = #888014 1'b1;
	MBR_OUT_expected[1] = #900000 1'b0;
end 
// expected MBR_OUT[ 0 ]
initial
begin
	MBR_OUT_expected[0] = 1'b0;
	MBR_OUT_expected[0] = #688027 1'b1;
	MBR_OUT_expected[0] = #800000 1'b0;
end 
// expected MIR[ 35 ]
initial
begin
	MIR_expected[35] = 1'b0;
end 
// expected MIR[ 34 ]
initial
begin
	MIR_expected[34] = 1'b0;
	MIR_expected[34] = #809417 1'b1;
	MIR_expected[34] = #900000 1'b0;
end 
// expected MIR[ 33 ]
initial
begin
	MIR_expected[33] = 1'b0;
end 
// expected MIR[ 32 ]
initial
begin
	MIR_expected[32] = 1'b0;
	MIR_expected[32] = #909619 1'b1;
	MIR_expected[32] = #200000 1'b0;
	MIR_expected[32] = #100000 1'b1;
	MIR_expected[32] = #500000 1'b0;
end 
// expected MIR[ 31 ]
initial
begin
	MIR_expected[31] = 1'b0;
	MIR_expected[31] = #409477 1'b1;
	MIR_expected[31] = #200000 1'b0;
	MIR_expected[31] = #200000 1'b1;
	MIR_expected[31] = #100000 1'b0;
end 
// expected MIR[ 30 ]
initial
begin
	MIR_expected[30] = 1'b0;
	MIR_expected[30] = #809815 1'b1;
	MIR_expected[30] = #100000 1'b0;
	MIR_expected[30] = #200000 1'b1;
	MIR_expected[30] = #600000 1'b0;
end 
// expected MIR[ 29 ]
initial
begin
	MIR_expected[29] = 1'b0;
	MIR_expected[29] = #909455 1'b1;
	MIR_expected[29] = #300000 1'b0;
	MIR_expected[29] = #400000 1'b1;
	MIR_expected[29] = #100000 1'b0;
end 
// expected MIR[ 28 ]
initial
begin
	MIR_expected[28] = 1'b1;
	MIR_expected[28] = #109850 1'b0;
	MIR_expected[28] = #100000 1'b1;
	MIR_expected[28] = #100000 1'b0;
	MIR_expected[28] = #200000 1'b1;
	# 200000;
	repeat(2)
	begin
		MIR_expected[28] = 1'b0;
		MIR_expected[28] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[28] = 1'b0;
	MIR_expected[28] = #300000 1'b1;
	MIR_expected[28] = #200000 1'b0;
	MIR_expected[28] = #100000 1'b1;
	MIR_expected[28] = #100000 1'b0;
	MIR_expected[28] = #100000 1'b1;
end 
// expected MIR[ 27 ]
initial
begin
	MIR_expected[27] = 1'b0;
	MIR_expected[27] = #409424 1'b1;
	MIR_expected[27] = #100000 1'b0;
	# 400000;
	repeat(3)
	begin
		MIR_expected[27] = 1'b1;
		MIR_expected[27] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[27] = 1'b1;
	MIR_expected[27] = #100000 1'b0;
end 
// expected MIR[ 26 ]
initial
begin
	MIR_expected[26] = 1'b0;
	MIR_expected[26] = #110015 1'b1;
	MIR_expected[26] = #100000 1'b0;
	MIR_expected[26] = #100000 1'b1;
	MIR_expected[26] = #100000 1'b0;
	MIR_expected[26] = #300000 1'b1;
	MIR_expected[26] = #100000 1'b0;
	MIR_expected[26] = #1000000 1'b1;
	MIR_expected[26] = #100000 1'b0;
end 
// expected MIR[ 25 ]
initial
begin
	MIR_expected[25] = 1'b0;
end 
// expected MIR[ 24 ]
initial
begin
	MIR_expected[24] = 1'b0;
	MIR_expected[24] = #1109776 1'b1;
	MIR_expected[24] = #100000 1'b0;
end 
// expected MIR[ 23 ]
initial
begin
	MIR_expected[23] = 1'b0;
	MIR_expected[23] = #1409741 1'b1;
	MIR_expected[23] = #100000 1'b0;
end 
// expected MIR[ 22 ]
initial
begin
	MIR_expected[22] = 1'b0;
end 
// expected MIR[ 21 ]
initial
begin
	MIR_expected[21] = 1'b0;
	MIR_expected[21] = #109786 1'b1;
	MIR_expected[21] = #100000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #300000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #300000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #200000 1'b1;
	MIR_expected[21] = #100000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #100000 1'b0;
end 
// expected MIR[ 20 ]
initial
begin
	MIR_expected[20] = 1'b0;
	MIR_expected[20] = #110142 1'b1;
	MIR_expected[20] = #100000 1'b0;
	MIR_expected[20] = #100000 1'b1;
	MIR_expected[20] = #1400000 1'b0;
	MIR_expected[20] = #100000 1'b1;
	MIR_expected[20] = #100000 1'b0;
end 
// expected MIR[ 19 ]
initial
begin
	MIR_expected[19] = 1'b0;
	MIR_expected[19] = #1510094 1'b1;
	MIR_expected[19] = #200000 1'b0;
end 
// expected MIR[ 18 ]
initial
begin
	MIR_expected[18] = 1'b0;
	MIR_expected[18] = #109995 1'b1;
	MIR_expected[18] = #100000 1'b0;
	MIR_expected[18] = #100000 1'b1;
	MIR_expected[18] = #1400000 1'b0;
	MIR_expected[18] = #100000 1'b1;
	MIR_expected[18] = #100000 1'b0;
end 
// expected MIR[ 17 ]
initial
begin
	MIR_expected[17] = 1'b0;
	MIR_expected[17] = #809691 1'b1;
	MIR_expected[17] = #100000 1'b0;
	MIR_expected[17] = #300000 1'b1;
	MIR_expected[17] = #100000 1'b0;
end 
// expected MIR[ 16 ]
initial
begin
	MIR_expected[16] = 1'b0;
	MIR_expected[16] = #109751 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #300000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #500000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #400000 1'b1;
	MIR_expected[16] = #100000 1'b0;
end 
// expected MIR[ 15 ]
initial
begin
	MIR_expected[15] = 1'b0;
	MIR_expected[15] = #1410093 1'b1;
	MIR_expected[15] = #200000 1'b0;
end 
// expected MIR[ 14 ]
initial
begin
	MIR_expected[14] = 1'b0;
	MIR_expected[14] = #910395 1'b1;
	MIR_expected[14] = #100000 1'b0;
	MIR_expected[14] = #200000 1'b1;
	MIR_expected[14] = #100000 1'b0;
end 
// expected MIR[ 13 ]
initial
begin
	MIR_expected[13] = 1'b0;
	MIR_expected[13] = #610086 1'b1;
	MIR_expected[13] = #100000 1'b0;
	MIR_expected[13] = #300000 1'b1;
	MIR_expected[13] = #100000 1'b0;
end 
// expected MIR[ 12 ]
initial
begin
	MIR_expected[12] = 1'b0;
end 
// expected MIR[ 11 ]
initial
begin
	MIR_expected[11] = 1'b0;
end 
// expected MIR[ 10 ]
initial
begin
	MIR_expected[10] = 1'b0;
	MIR_expected[10] = #410105 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #300000 1'b1;
	MIR_expected[10] = #100000 1'b0;
end 
// expected MIR[ 9 ]
initial
begin
	MIR_expected[9] = 1'b0;
	# 110319;
	repeat(3)
	begin
		MIR_expected[9] = 1'b1;
		MIR_expected[9] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[9] = 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #500000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #200000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #100000 1'b1;
	MIR_expected[9] = #100000 1'b0;
end 
// expected MIR[ 8 ]
initial
begin
	MIR_expected[8] = 1'b0;
	MIR_expected[8] = #610078 1'b1;
	MIR_expected[8] = #100000 1'b0;
end 
// expected MIR[ 7 ]
initial
begin
	MIR_expected[7] = 1'b0;
	MIR_expected[7] = #409819 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #300000 1'b1;
	MIR_expected[7] = #100000 1'b0;
end 
// expected MIR[ 6 ]
initial
begin
	MIR_expected[6] = 1'b0;
	MIR_expected[6] = #610311 1'b1;
	MIR_expected[6] = #100000 1'b0;
end 
// expected MIR[ 5 ]
initial
begin
	MIR_expected[5] = 1'b0;
	MIR_expected[5] = #810649 1'b1;
	MIR_expected[5] = #100000 1'b0;
end 
// expected MIR[ 4 ]
initial
begin
	MIR_expected[4] = 1'b0;
	# 111002;
	repeat(3)
	begin
		MIR_expected[4] = 1'b1;
		MIR_expected[4] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[4] = 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #500000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #200000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #100000 1'b1;
	MIR_expected[4] = #100000 1'b0;
end 
// expected MIR[ 3 ]
initial
begin
	MIR_expected[3] = 1'b0;
	MIR_expected[3] = #1109413 1'b1;
	MIR_expected[3] = #100000 1'b0;
	MIR_expected[3] = #400000 1'b1;
	MIR_expected[3] = #100000 1'b0;
end 
// expected MIR[ 2 ]
initial
begin
	MIR_expected[2] = 1'b0;
	MIR_expected[2] = #409703 1'b1;
	MIR_expected[2] = #100000 1'b0;
	MIR_expected[2] = #300000 1'b1;
	MIR_expected[2] = #200000 1'b0;
end 
// expected MIR[ 1 ]
initial
begin
	MIR_expected[1] = 1'b0;
	MIR_expected[1] = #609440 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #200000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #400000 1'b1;
	MIR_expected[1] = #200000 1'b0;
end 
// expected MIR[ 0 ]
initial
begin
	MIR_expected[0] = 1'b0;
	# 109436;
	repeat(4)
	begin
		MIR_expected[0] = 1'b1;
		MIR_expected[0] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[0] = 1'b1;
	MIR_expected[0] = #100000 1'b0;
	MIR_expected[0] = #200000 1'b1;
	MIR_expected[0] = #200000 1'b0;
	MIR_expected[0] = #100000 1'b1;
	MIR_expected[0] = #100000 1'b0;
	MIR_expected[0] = #200000 1'b1;
	MIR_expected[0] = #100000 1'b0;
end 
// expected MPC[ 8 ]
initial
begin
	MPC_expected[8] = 1'b0;
	MPC_expected[8] = #1112549 1'b1;
	MPC_expected[8] = #100000 1'b0;
end 
// expected MPC[ 7 ]
initial
begin
	MPC_expected[7] = 1'b0;
	MPC_expected[7] = #787832 1'b1;
	MPC_expected[7] = #923363 1'b0;
end 
// expected MPC[ 6 ]
initial
begin
	MPC_expected[6] = 1'b0;
	MPC_expected[6] = #1811625 1'b1;
	MPC_expected[6] = #76000 1'b0;
end 
// expected MPC[ 5 ]
initial
begin
	MPC_expected[5] = 1'b0;
	MPC_expected[5] = #912075 1'b1;
	MPC_expected[5] = #200000 1'b0;
	MPC_expected[5] = #100000 1'b1;
	MPC_expected[5] = #500000 1'b0;
end 
// expected MPC[ 4 ]
initial
begin
	MPC_expected[4] = 1'b0;
	MPC_expected[4] = #388311 1'b1;
	MPC_expected[4] = #223409 1'b0;
	MPC_expected[4] = #176591 1'b1;
	MPC_expected[4] = #123409 1'b0;
	MPC_expected[4] = #900595 1'b1;
	MPC_expected[4] = #75996 1'b0;
end 
// expected MPC[ 3 ]
initial
begin
	MPC_expected[3] = 1'b0;
	MPC_expected[3] = #787975 1'b1;
	MPC_expected[3] = #123327 1'b0;
	MPC_expected[3] = #200000 1'b1;
	MPC_expected[3] = #600000 1'b0;
	MPC_expected[3] = #100680 1'b1;
	MPC_expected[3] = #75993 1'b0;
end 
// expected MPC[ 2 ]
initial
begin
	MPC_expected[2] = 1'b0;
	MPC_expected[2] = #911389 1'b1;
	MPC_expected[2] = #300000 1'b0;
	MPC_expected[2] = #400000 1'b1;
	MPC_expected[2] = #100000 1'b0;
end 
// expected MPC[ 1 ]
initial
begin
	MPC_expected[1] = 1'b1;
	MPC_expected[1] = #110460 1'b0;
	MPC_expected[1] = #100000 1'b1;
	MPC_expected[1] = #100000 1'b0;
	MPC_expected[1] = #200000 1'b1;
	# 200000;
	repeat(2)
	begin
		MPC_expected[1] = 1'b0;
		MPC_expected[1] = #100000 1'b1;
		# 100000;
	end
	MPC_expected[1] = 1'b0;
	MPC_expected[1] = #300000 1'b1;
	MPC_expected[1] = #200000 1'b0;
	MPC_expected[1] = #100000 1'b1;
	MPC_expected[1] = #100000 1'b0;
	MPC_expected[1] = #1258 1'b1;
	MPC_expected[1] = #75690 1'b0;
	MPC_expected[1] = #23052 1'b1;
end 
// expected MPC[ 0 ]
initial
begin
	MPC_expected[0] = 1'b0;
	MPC_expected[0] = #411551 1'b1;
	MPC_expected[0] = #100000 1'b0;
	MPC_expected[0] = #276900 1'b1;
	MPC_expected[0] = #24309 1'b0;
	# 98791;
	repeat(3)
	begin
		MPC_expected[0] = 1'b1;
		MPC_expected[0] = #100000 1'b0;
		# 100000;
	end
	MPC_expected[0] = 1'b1;
	MPC_expected[0] = #100000 1'b0;
end 

// expected DATA_MEM_write_enable
initial
begin
	DATA_MEM_write_enable_expected = 1'b0;
	DATA_MEM_write_enable_expected = #686427 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
end 
// expected A[ 31 ]
initial
begin
	A_expected[31] = 1'bX;
end 
// expected A[ 30 ]
initial
begin
	A_expected[30] = 1'bX;
end 
// expected A[ 29 ]
initial
begin
	A_expected[29] = 1'bX;
end 
// expected A[ 28 ]
initial
begin
	A_expected[28] = 1'bX;
end 
// expected A[ 27 ]
initial
begin
	A_expected[27] = 1'bX;
end 
// expected A[ 26 ]
initial
begin
	A_expected[26] = 1'bX;
end 
// expected A[ 25 ]
initial
begin
	A_expected[25] = 1'bX;
end 
// expected A[ 24 ]
initial
begin
	A_expected[24] = 1'bX;
end 
// expected A[ 23 ]
initial
begin
	A_expected[23] = 1'bX;
end 
// expected A[ 22 ]
initial
begin
	A_expected[22] = 1'bX;
end 
// expected A[ 21 ]
initial
begin
	A_expected[21] = 1'bX;
end 
// expected A[ 20 ]
initial
begin
	A_expected[20] = 1'bX;
end 
// expected A[ 19 ]
initial
begin
	A_expected[19] = 1'bX;
end 
// expected A[ 18 ]
initial
begin
	A_expected[18] = 1'bX;
end 
// expected A[ 17 ]
initial
begin
	A_expected[17] = 1'bX;
end 
// expected A[ 16 ]
initial
begin
	A_expected[16] = 1'bX;
end 
// expected A[ 15 ]
initial
begin
	A_expected[15] = 1'bX;
end 
// expected A[ 14 ]
initial
begin
	A_expected[14] = 1'bX;
end 
// expected A[ 13 ]
initial
begin
	A_expected[13] = 1'bX;
end 
// expected A[ 12 ]
initial
begin
	A_expected[12] = 1'bX;
end 
// expected A[ 11 ]
initial
begin
	A_expected[11] = 1'bX;
end 
// expected A[ 10 ]
initial
begin
	A_expected[10] = 1'bX;
end 
// expected A[ 9 ]
initial
begin
	A_expected[9] = 1'bX;
end 
// expected A[ 8 ]
initial
begin
	A_expected[8] = 1'bX;
end 
// expected A[ 7 ]
initial
begin
	A_expected[7] = 1'bX;
end 
// expected A[ 6 ]
initial
begin
	A_expected[6] = 1'bX;
end 
// expected A[ 5 ]
initial
begin
	A_expected[5] = 1'bX;
end 
// expected A[ 4 ]
initial
begin
	A_expected[4] = 1'bX;
end 
// expected A[ 3 ]
initial
begin
	A_expected[3] = 1'bX;
end 
// expected A[ 2 ]
initial
begin
	A_expected[2] = 1'bX;
end 
// expected A[ 1 ]
initial
begin
	A_expected[1] = 1'bX;
end 
// expected A[ 0 ]
initial
begin
	A_expected[0] = 1'bX;
end 
// expected B[ 31 ]
initial
begin
	B_expected[31] = 1'bX;
end 
// expected B[ 30 ]
initial
begin
	B_expected[30] = 1'bX;
end 
// expected B[ 29 ]
initial
begin
	B_expected[29] = 1'bX;
end 
// expected B[ 28 ]
initial
begin
	B_expected[28] = 1'bX;
end 
// expected B[ 27 ]
initial
begin
	B_expected[27] = 1'bX;
end 
// expected B[ 26 ]
initial
begin
	B_expected[26] = 1'bX;
end 
// expected B[ 25 ]
initial
begin
	B_expected[25] = 1'bX;
end 
// expected B[ 24 ]
initial
begin
	B_expected[24] = 1'bX;
end 
// expected B[ 23 ]
initial
begin
	B_expected[23] = 1'bX;
end 
// expected B[ 22 ]
initial
begin
	B_expected[22] = 1'bX;
end 
// expected B[ 21 ]
initial
begin
	B_expected[21] = 1'bX;
end 
// expected B[ 20 ]
initial
begin
	B_expected[20] = 1'bX;
end 
// expected B[ 19 ]
initial
begin
	B_expected[19] = 1'bX;
end 
// expected B[ 18 ]
initial
begin
	B_expected[18] = 1'bX;
end 
// expected B[ 17 ]
initial
begin
	B_expected[17] = 1'bX;
end 
// expected B[ 16 ]
initial
begin
	B_expected[16] = 1'bX;
end 
// expected B[ 15 ]
initial
begin
	B_expected[15] = 1'bX;
end 
// expected B[ 14 ]
initial
begin
	B_expected[14] = 1'bX;
end 
// expected B[ 13 ]
initial
begin
	B_expected[13] = 1'bX;
end 
// expected B[ 12 ]
initial
begin
	B_expected[12] = 1'bX;
end 
// expected B[ 11 ]
initial
begin
	B_expected[11] = 1'bX;
end 
// expected B[ 10 ]
initial
begin
	B_expected[10] = 1'bX;
end 
// expected B[ 9 ]
initial
begin
	B_expected[9] = 1'bX;
end 
// expected B[ 8 ]
initial
begin
	B_expected[8] = 1'bX;
end 
// expected B[ 7 ]
initial
begin
	B_expected[7] = 1'bX;
end 
// expected B[ 6 ]
initial
begin
	B_expected[6] = 1'bX;
end 
// expected B[ 5 ]
initial
begin
	B_expected[5] = 1'bX;
end 
// expected B[ 4 ]
initial
begin
	B_expected[4] = 1'bX;
end 
// expected B[ 3 ]
initial
begin
	B_expected[3] = 1'bX;
end 
// expected B[ 2 ]
initial
begin
	B_expected[2] = 1'bX;
end 
// expected B[ 1 ]
initial
begin
	B_expected[1] = 1'bX;
end 
// expected B[ 0 ]
initial
begin
	B_expected[0] = 1'bX;
end 
// expected C[ 31 ]
initial
begin
	C_expected[31] = 1'bX;
end 
// expected C[ 30 ]
initial
begin
	C_expected[30] = 1'bX;
end 
// expected C[ 29 ]
initial
begin
	C_expected[29] = 1'bX;
end 
// expected C[ 28 ]
initial
begin
	C_expected[28] = 1'bX;
end 
// expected C[ 27 ]
initial
begin
	C_expected[27] = 1'bX;
end 
// expected C[ 26 ]
initial
begin
	C_expected[26] = 1'bX;
end 
// expected C[ 25 ]
initial
begin
	C_expected[25] = 1'bX;
end 
// expected C[ 24 ]
initial
begin
	C_expected[24] = 1'bX;
end 
// expected C[ 23 ]
initial
begin
	C_expected[23] = 1'bX;
end 
// expected C[ 22 ]
initial
begin
	C_expected[22] = 1'bX;
end 
// expected C[ 21 ]
initial
begin
	C_expected[21] = 1'bX;
end 
// expected C[ 20 ]
initial
begin
	C_expected[20] = 1'bX;
end 
// expected C[ 19 ]
initial
begin
	C_expected[19] = 1'bX;
end 
// expected C[ 18 ]
initial
begin
	C_expected[18] = 1'bX;
end 
// expected C[ 17 ]
initial
begin
	C_expected[17] = 1'bX;
end 
// expected C[ 16 ]
initial
begin
	C_expected[16] = 1'bX;
end 
// expected C[ 15 ]
initial
begin
	C_expected[15] = 1'bX;
end 
// expected C[ 14 ]
initial
begin
	C_expected[14] = 1'bX;
end 
// expected C[ 13 ]
initial
begin
	C_expected[13] = 1'bX;
end 
// expected C[ 12 ]
initial
begin
	C_expected[12] = 1'bX;
end 
// expected C[ 11 ]
initial
begin
	C_expected[11] = 1'bX;
end 
// expected C[ 10 ]
initial
begin
	C_expected[10] = 1'bX;
end 
// expected C[ 9 ]
initial
begin
	C_expected[9] = 1'bX;
end 
// expected C[ 8 ]
initial
begin
	C_expected[8] = 1'bX;
end 
// expected C[ 7 ]
initial
begin
	C_expected[7] = 1'bX;
end 
// expected C[ 6 ]
initial
begin
	C_expected[6] = 1'bX;
end 
// expected C[ 5 ]
initial
begin
	C_expected[5] = 1'bX;
end 
// expected C[ 4 ]
initial
begin
	C_expected[4] = 1'bX;
end 
// expected C[ 3 ]
initial
begin
	C_expected[3] = 1'bX;
end 
// expected C[ 2 ]
initial
begin
	C_expected[2] = 1'bX;
end 
// expected C[ 1 ]
initial
begin
	C_expected[1] = 1'bX;
end 
// expected C[ 0 ]
initial
begin
	C_expected[0] = 1'bX;
end 
// generate trigger
always @(A_expected or A or B_expected or B or C_expected or C or DATA_MEM_ADDR_expected or DATA_MEM_ADDR or DATA_MEM_OUT_expected or DATA_MEM_OUT or DATA_MEM_write_enable_expected or DATA_MEM_write_enable or MBR_OUT_expected or MBR_OUT or MIR_expected or MIR or MPC_expected or MPC or PC_expected or PC)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A = %b | expected B = %b | expected C = %b | expected DATA_MEM_ADDR = %b | expected DATA_MEM_OUT = %b | expected DATA_MEM_write_enable = %b | expected MBR_OUT = %b | expected MIR = %b | expected MPC = %b | expected PC = %b | ",A_expected_prev,B_expected_prev,C_expected_prev,DATA_MEM_ADDR_expected_prev,DATA_MEM_OUT_expected_prev,DATA_MEM_write_enable_expected_prev,MBR_OUT_expected_prev,MIR_expected_prev,MPC_expected_prev,PC_expected_prev);
	$display("| real A = %b | real B = %b | real C = %b | real DATA_MEM_ADDR = %b | real DATA_MEM_OUT = %b | real DATA_MEM_write_enable = %b | real MBR_OUT = %b | real MIR = %b | real MPC = %b | real PC = %b | ",A_prev,B_prev,C_prev,DATA_MEM_ADDR_prev,DATA_MEM_OUT_prev,DATA_MEM_write_enable_prev,MBR_OUT_prev,MIR_prev,MPC_prev,PC_prev);
`endif
	if (
		( A_expected_prev[0] !== 1'bx ) && ( A_prev[0] !== A_expected_prev[0] )
		&& ((A_expected_prev[0] !== last_A_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[0] = A_expected_prev[0];
	end
	if (
		( A_expected_prev[1] !== 1'bx ) && ( A_prev[1] !== A_expected_prev[1] )
		&& ((A_expected_prev[1] !== last_A_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[1] = A_expected_prev[1];
	end
	if (
		( A_expected_prev[2] !== 1'bx ) && ( A_prev[2] !== A_expected_prev[2] )
		&& ((A_expected_prev[2] !== last_A_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[2] = A_expected_prev[2];
	end
	if (
		( A_expected_prev[3] !== 1'bx ) && ( A_prev[3] !== A_expected_prev[3] )
		&& ((A_expected_prev[3] !== last_A_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[3] = A_expected_prev[3];
	end
	if (
		( A_expected_prev[4] !== 1'bx ) && ( A_prev[4] !== A_expected_prev[4] )
		&& ((A_expected_prev[4] !== last_A_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[4] = A_expected_prev[4];
	end
	if (
		( A_expected_prev[5] !== 1'bx ) && ( A_prev[5] !== A_expected_prev[5] )
		&& ((A_expected_prev[5] !== last_A_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[5] = A_expected_prev[5];
	end
	if (
		( A_expected_prev[6] !== 1'bx ) && ( A_prev[6] !== A_expected_prev[6] )
		&& ((A_expected_prev[6] !== last_A_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[6] = A_expected_prev[6];
	end
	if (
		( A_expected_prev[7] !== 1'bx ) && ( A_prev[7] !== A_expected_prev[7] )
		&& ((A_expected_prev[7] !== last_A_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[7] = A_expected_prev[7];
	end
	if (
		( A_expected_prev[8] !== 1'bx ) && ( A_prev[8] !== A_expected_prev[8] )
		&& ((A_expected_prev[8] !== last_A_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[8] = A_expected_prev[8];
	end
	if (
		( A_expected_prev[9] !== 1'bx ) && ( A_prev[9] !== A_expected_prev[9] )
		&& ((A_expected_prev[9] !== last_A_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[9] = A_expected_prev[9];
	end
	if (
		( A_expected_prev[10] !== 1'bx ) && ( A_prev[10] !== A_expected_prev[10] )
		&& ((A_expected_prev[10] !== last_A_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[10] = A_expected_prev[10];
	end
	if (
		( A_expected_prev[11] !== 1'bx ) && ( A_prev[11] !== A_expected_prev[11] )
		&& ((A_expected_prev[11] !== last_A_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[11] = A_expected_prev[11];
	end
	if (
		( A_expected_prev[12] !== 1'bx ) && ( A_prev[12] !== A_expected_prev[12] )
		&& ((A_expected_prev[12] !== last_A_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[12] = A_expected_prev[12];
	end
	if (
		( A_expected_prev[13] !== 1'bx ) && ( A_prev[13] !== A_expected_prev[13] )
		&& ((A_expected_prev[13] !== last_A_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[13] = A_expected_prev[13];
	end
	if (
		( A_expected_prev[14] !== 1'bx ) && ( A_prev[14] !== A_expected_prev[14] )
		&& ((A_expected_prev[14] !== last_A_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[14] = A_expected_prev[14];
	end
	if (
		( A_expected_prev[15] !== 1'bx ) && ( A_prev[15] !== A_expected_prev[15] )
		&& ((A_expected_prev[15] !== last_A_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[15] = A_expected_prev[15];
	end
	if (
		( A_expected_prev[16] !== 1'bx ) && ( A_prev[16] !== A_expected_prev[16] )
		&& ((A_expected_prev[16] !== last_A_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[16] = A_expected_prev[16];
	end
	if (
		( A_expected_prev[17] !== 1'bx ) && ( A_prev[17] !== A_expected_prev[17] )
		&& ((A_expected_prev[17] !== last_A_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[17] = A_expected_prev[17];
	end
	if (
		( A_expected_prev[18] !== 1'bx ) && ( A_prev[18] !== A_expected_prev[18] )
		&& ((A_expected_prev[18] !== last_A_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[18] = A_expected_prev[18];
	end
	if (
		( A_expected_prev[19] !== 1'bx ) && ( A_prev[19] !== A_expected_prev[19] )
		&& ((A_expected_prev[19] !== last_A_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[19] = A_expected_prev[19];
	end
	if (
		( A_expected_prev[20] !== 1'bx ) && ( A_prev[20] !== A_expected_prev[20] )
		&& ((A_expected_prev[20] !== last_A_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[20] = A_expected_prev[20];
	end
	if (
		( A_expected_prev[21] !== 1'bx ) && ( A_prev[21] !== A_expected_prev[21] )
		&& ((A_expected_prev[21] !== last_A_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[21] = A_expected_prev[21];
	end
	if (
		( A_expected_prev[22] !== 1'bx ) && ( A_prev[22] !== A_expected_prev[22] )
		&& ((A_expected_prev[22] !== last_A_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[22] = A_expected_prev[22];
	end
	if (
		( A_expected_prev[23] !== 1'bx ) && ( A_prev[23] !== A_expected_prev[23] )
		&& ((A_expected_prev[23] !== last_A_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[23] = A_expected_prev[23];
	end
	if (
		( A_expected_prev[24] !== 1'bx ) && ( A_prev[24] !== A_expected_prev[24] )
		&& ((A_expected_prev[24] !== last_A_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[24] = A_expected_prev[24];
	end
	if (
		( A_expected_prev[25] !== 1'bx ) && ( A_prev[25] !== A_expected_prev[25] )
		&& ((A_expected_prev[25] !== last_A_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[25] = A_expected_prev[25];
	end
	if (
		( A_expected_prev[26] !== 1'bx ) && ( A_prev[26] !== A_expected_prev[26] )
		&& ((A_expected_prev[26] !== last_A_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[26] = A_expected_prev[26];
	end
	if (
		( A_expected_prev[27] !== 1'bx ) && ( A_prev[27] !== A_expected_prev[27] )
		&& ((A_expected_prev[27] !== last_A_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[27] = A_expected_prev[27];
	end
	if (
		( A_expected_prev[28] !== 1'bx ) && ( A_prev[28] !== A_expected_prev[28] )
		&& ((A_expected_prev[28] !== last_A_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[28] = A_expected_prev[28];
	end
	if (
		( A_expected_prev[29] !== 1'bx ) && ( A_prev[29] !== A_expected_prev[29] )
		&& ((A_expected_prev[29] !== last_A_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[29] = A_expected_prev[29];
	end
	if (
		( A_expected_prev[30] !== 1'bx ) && ( A_prev[30] !== A_expected_prev[30] )
		&& ((A_expected_prev[30] !== last_A_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[30] = A_expected_prev[30];
	end
	if (
		( A_expected_prev[31] !== 1'bx ) && ( A_prev[31] !== A_expected_prev[31] )
		&& ((A_expected_prev[31] !== last_A_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[31] = A_expected_prev[31];
	end
	if (
		( B_expected_prev[0] !== 1'bx ) && ( B_prev[0] !== B_expected_prev[0] )
		&& ((B_expected_prev[0] !== last_B_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[0] = B_expected_prev[0];
	end
	if (
		( B_expected_prev[1] !== 1'bx ) && ( B_prev[1] !== B_expected_prev[1] )
		&& ((B_expected_prev[1] !== last_B_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[1] = B_expected_prev[1];
	end
	if (
		( B_expected_prev[2] !== 1'bx ) && ( B_prev[2] !== B_expected_prev[2] )
		&& ((B_expected_prev[2] !== last_B_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[2] = B_expected_prev[2];
	end
	if (
		( B_expected_prev[3] !== 1'bx ) && ( B_prev[3] !== B_expected_prev[3] )
		&& ((B_expected_prev[3] !== last_B_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[3] = B_expected_prev[3];
	end
	if (
		( B_expected_prev[4] !== 1'bx ) && ( B_prev[4] !== B_expected_prev[4] )
		&& ((B_expected_prev[4] !== last_B_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[4] = B_expected_prev[4];
	end
	if (
		( B_expected_prev[5] !== 1'bx ) && ( B_prev[5] !== B_expected_prev[5] )
		&& ((B_expected_prev[5] !== last_B_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[5] = B_expected_prev[5];
	end
	if (
		( B_expected_prev[6] !== 1'bx ) && ( B_prev[6] !== B_expected_prev[6] )
		&& ((B_expected_prev[6] !== last_B_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[6] = B_expected_prev[6];
	end
	if (
		( B_expected_prev[7] !== 1'bx ) && ( B_prev[7] !== B_expected_prev[7] )
		&& ((B_expected_prev[7] !== last_B_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[7] = B_expected_prev[7];
	end
	if (
		( B_expected_prev[8] !== 1'bx ) && ( B_prev[8] !== B_expected_prev[8] )
		&& ((B_expected_prev[8] !== last_B_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[8] = B_expected_prev[8];
	end
	if (
		( B_expected_prev[9] !== 1'bx ) && ( B_prev[9] !== B_expected_prev[9] )
		&& ((B_expected_prev[9] !== last_B_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[9] = B_expected_prev[9];
	end
	if (
		( B_expected_prev[10] !== 1'bx ) && ( B_prev[10] !== B_expected_prev[10] )
		&& ((B_expected_prev[10] !== last_B_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[10] = B_expected_prev[10];
	end
	if (
		( B_expected_prev[11] !== 1'bx ) && ( B_prev[11] !== B_expected_prev[11] )
		&& ((B_expected_prev[11] !== last_B_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[11] = B_expected_prev[11];
	end
	if (
		( B_expected_prev[12] !== 1'bx ) && ( B_prev[12] !== B_expected_prev[12] )
		&& ((B_expected_prev[12] !== last_B_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[12] = B_expected_prev[12];
	end
	if (
		( B_expected_prev[13] !== 1'bx ) && ( B_prev[13] !== B_expected_prev[13] )
		&& ((B_expected_prev[13] !== last_B_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[13] = B_expected_prev[13];
	end
	if (
		( B_expected_prev[14] !== 1'bx ) && ( B_prev[14] !== B_expected_prev[14] )
		&& ((B_expected_prev[14] !== last_B_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[14] = B_expected_prev[14];
	end
	if (
		( B_expected_prev[15] !== 1'bx ) && ( B_prev[15] !== B_expected_prev[15] )
		&& ((B_expected_prev[15] !== last_B_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[15] = B_expected_prev[15];
	end
	if (
		( B_expected_prev[16] !== 1'bx ) && ( B_prev[16] !== B_expected_prev[16] )
		&& ((B_expected_prev[16] !== last_B_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[16] = B_expected_prev[16];
	end
	if (
		( B_expected_prev[17] !== 1'bx ) && ( B_prev[17] !== B_expected_prev[17] )
		&& ((B_expected_prev[17] !== last_B_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[17] = B_expected_prev[17];
	end
	if (
		( B_expected_prev[18] !== 1'bx ) && ( B_prev[18] !== B_expected_prev[18] )
		&& ((B_expected_prev[18] !== last_B_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[18] = B_expected_prev[18];
	end
	if (
		( B_expected_prev[19] !== 1'bx ) && ( B_prev[19] !== B_expected_prev[19] )
		&& ((B_expected_prev[19] !== last_B_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[19] = B_expected_prev[19];
	end
	if (
		( B_expected_prev[20] !== 1'bx ) && ( B_prev[20] !== B_expected_prev[20] )
		&& ((B_expected_prev[20] !== last_B_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[20] = B_expected_prev[20];
	end
	if (
		( B_expected_prev[21] !== 1'bx ) && ( B_prev[21] !== B_expected_prev[21] )
		&& ((B_expected_prev[21] !== last_B_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[21] = B_expected_prev[21];
	end
	if (
		( B_expected_prev[22] !== 1'bx ) && ( B_prev[22] !== B_expected_prev[22] )
		&& ((B_expected_prev[22] !== last_B_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[22] = B_expected_prev[22];
	end
	if (
		( B_expected_prev[23] !== 1'bx ) && ( B_prev[23] !== B_expected_prev[23] )
		&& ((B_expected_prev[23] !== last_B_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[23] = B_expected_prev[23];
	end
	if (
		( B_expected_prev[24] !== 1'bx ) && ( B_prev[24] !== B_expected_prev[24] )
		&& ((B_expected_prev[24] !== last_B_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[24] = B_expected_prev[24];
	end
	if (
		( B_expected_prev[25] !== 1'bx ) && ( B_prev[25] !== B_expected_prev[25] )
		&& ((B_expected_prev[25] !== last_B_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[25] = B_expected_prev[25];
	end
	if (
		( B_expected_prev[26] !== 1'bx ) && ( B_prev[26] !== B_expected_prev[26] )
		&& ((B_expected_prev[26] !== last_B_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[26] = B_expected_prev[26];
	end
	if (
		( B_expected_prev[27] !== 1'bx ) && ( B_prev[27] !== B_expected_prev[27] )
		&& ((B_expected_prev[27] !== last_B_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[27] = B_expected_prev[27];
	end
	if (
		( B_expected_prev[28] !== 1'bx ) && ( B_prev[28] !== B_expected_prev[28] )
		&& ((B_expected_prev[28] !== last_B_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[28] = B_expected_prev[28];
	end
	if (
		( B_expected_prev[29] !== 1'bx ) && ( B_prev[29] !== B_expected_prev[29] )
		&& ((B_expected_prev[29] !== last_B_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[29] = B_expected_prev[29];
	end
	if (
		( B_expected_prev[30] !== 1'bx ) && ( B_prev[30] !== B_expected_prev[30] )
		&& ((B_expected_prev[30] !== last_B_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[30] = B_expected_prev[30];
	end
	if (
		( B_expected_prev[31] !== 1'bx ) && ( B_prev[31] !== B_expected_prev[31] )
		&& ((B_expected_prev[31] !== last_B_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[31] = B_expected_prev[31];
	end
	if (
		( C_expected_prev[0] !== 1'bx ) && ( C_prev[0] !== C_expected_prev[0] )
		&& ((C_expected_prev[0] !== last_C_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[0] = C_expected_prev[0];
	end
	if (
		( C_expected_prev[1] !== 1'bx ) && ( C_prev[1] !== C_expected_prev[1] )
		&& ((C_expected_prev[1] !== last_C_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[1] = C_expected_prev[1];
	end
	if (
		( C_expected_prev[2] !== 1'bx ) && ( C_prev[2] !== C_expected_prev[2] )
		&& ((C_expected_prev[2] !== last_C_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[2] = C_expected_prev[2];
	end
	if (
		( C_expected_prev[3] !== 1'bx ) && ( C_prev[3] !== C_expected_prev[3] )
		&& ((C_expected_prev[3] !== last_C_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[3] = C_expected_prev[3];
	end
	if (
		( C_expected_prev[4] !== 1'bx ) && ( C_prev[4] !== C_expected_prev[4] )
		&& ((C_expected_prev[4] !== last_C_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[4] = C_expected_prev[4];
	end
	if (
		( C_expected_prev[5] !== 1'bx ) && ( C_prev[5] !== C_expected_prev[5] )
		&& ((C_expected_prev[5] !== last_C_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[5] = C_expected_prev[5];
	end
	if (
		( C_expected_prev[6] !== 1'bx ) && ( C_prev[6] !== C_expected_prev[6] )
		&& ((C_expected_prev[6] !== last_C_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[6] = C_expected_prev[6];
	end
	if (
		( C_expected_prev[7] !== 1'bx ) && ( C_prev[7] !== C_expected_prev[7] )
		&& ((C_expected_prev[7] !== last_C_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[7] = C_expected_prev[7];
	end
	if (
		( C_expected_prev[8] !== 1'bx ) && ( C_prev[8] !== C_expected_prev[8] )
		&& ((C_expected_prev[8] !== last_C_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[8] = C_expected_prev[8];
	end
	if (
		( C_expected_prev[9] !== 1'bx ) && ( C_prev[9] !== C_expected_prev[9] )
		&& ((C_expected_prev[9] !== last_C_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[9] = C_expected_prev[9];
	end
	if (
		( C_expected_prev[10] !== 1'bx ) && ( C_prev[10] !== C_expected_prev[10] )
		&& ((C_expected_prev[10] !== last_C_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[10] = C_expected_prev[10];
	end
	if (
		( C_expected_prev[11] !== 1'bx ) && ( C_prev[11] !== C_expected_prev[11] )
		&& ((C_expected_prev[11] !== last_C_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[11] = C_expected_prev[11];
	end
	if (
		( C_expected_prev[12] !== 1'bx ) && ( C_prev[12] !== C_expected_prev[12] )
		&& ((C_expected_prev[12] !== last_C_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[12] = C_expected_prev[12];
	end
	if (
		( C_expected_prev[13] !== 1'bx ) && ( C_prev[13] !== C_expected_prev[13] )
		&& ((C_expected_prev[13] !== last_C_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[13] = C_expected_prev[13];
	end
	if (
		( C_expected_prev[14] !== 1'bx ) && ( C_prev[14] !== C_expected_prev[14] )
		&& ((C_expected_prev[14] !== last_C_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[14] = C_expected_prev[14];
	end
	if (
		( C_expected_prev[15] !== 1'bx ) && ( C_prev[15] !== C_expected_prev[15] )
		&& ((C_expected_prev[15] !== last_C_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[15] = C_expected_prev[15];
	end
	if (
		( C_expected_prev[16] !== 1'bx ) && ( C_prev[16] !== C_expected_prev[16] )
		&& ((C_expected_prev[16] !== last_C_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[16] = C_expected_prev[16];
	end
	if (
		( C_expected_prev[17] !== 1'bx ) && ( C_prev[17] !== C_expected_prev[17] )
		&& ((C_expected_prev[17] !== last_C_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[17] = C_expected_prev[17];
	end
	if (
		( C_expected_prev[18] !== 1'bx ) && ( C_prev[18] !== C_expected_prev[18] )
		&& ((C_expected_prev[18] !== last_C_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[18] = C_expected_prev[18];
	end
	if (
		( C_expected_prev[19] !== 1'bx ) && ( C_prev[19] !== C_expected_prev[19] )
		&& ((C_expected_prev[19] !== last_C_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[19] = C_expected_prev[19];
	end
	if (
		( C_expected_prev[20] !== 1'bx ) && ( C_prev[20] !== C_expected_prev[20] )
		&& ((C_expected_prev[20] !== last_C_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[20] = C_expected_prev[20];
	end
	if (
		( C_expected_prev[21] !== 1'bx ) && ( C_prev[21] !== C_expected_prev[21] )
		&& ((C_expected_prev[21] !== last_C_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[21] = C_expected_prev[21];
	end
	if (
		( C_expected_prev[22] !== 1'bx ) && ( C_prev[22] !== C_expected_prev[22] )
		&& ((C_expected_prev[22] !== last_C_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[22] = C_expected_prev[22];
	end
	if (
		( C_expected_prev[23] !== 1'bx ) && ( C_prev[23] !== C_expected_prev[23] )
		&& ((C_expected_prev[23] !== last_C_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[23] = C_expected_prev[23];
	end
	if (
		( C_expected_prev[24] !== 1'bx ) && ( C_prev[24] !== C_expected_prev[24] )
		&& ((C_expected_prev[24] !== last_C_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[24] = C_expected_prev[24];
	end
	if (
		( C_expected_prev[25] !== 1'bx ) && ( C_prev[25] !== C_expected_prev[25] )
		&& ((C_expected_prev[25] !== last_C_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[25] = C_expected_prev[25];
	end
	if (
		( C_expected_prev[26] !== 1'bx ) && ( C_prev[26] !== C_expected_prev[26] )
		&& ((C_expected_prev[26] !== last_C_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[26] = C_expected_prev[26];
	end
	if (
		( C_expected_prev[27] !== 1'bx ) && ( C_prev[27] !== C_expected_prev[27] )
		&& ((C_expected_prev[27] !== last_C_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[27] = C_expected_prev[27];
	end
	if (
		( C_expected_prev[28] !== 1'bx ) && ( C_prev[28] !== C_expected_prev[28] )
		&& ((C_expected_prev[28] !== last_C_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[28] = C_expected_prev[28];
	end
	if (
		( C_expected_prev[29] !== 1'bx ) && ( C_prev[29] !== C_expected_prev[29] )
		&& ((C_expected_prev[29] !== last_C_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[29] = C_expected_prev[29];
	end
	if (
		( C_expected_prev[30] !== 1'bx ) && ( C_prev[30] !== C_expected_prev[30] )
		&& ((C_expected_prev[30] !== last_C_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[30] = C_expected_prev[30];
	end
	if (
		( C_expected_prev[31] !== 1'bx ) && ( C_prev[31] !== C_expected_prev[31] )
		&& ((C_expected_prev[31] !== last_C_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[31] = C_expected_prev[31];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[0] !== 1'bx ) && ( DATA_MEM_ADDR_prev[0] !== DATA_MEM_ADDR_expected_prev[0] )
		&& ((DATA_MEM_ADDR_expected_prev[0] !== last_DATA_MEM_ADDR_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[0] = DATA_MEM_ADDR_expected_prev[0];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[1] !== 1'bx ) && ( DATA_MEM_ADDR_prev[1] !== DATA_MEM_ADDR_expected_prev[1] )
		&& ((DATA_MEM_ADDR_expected_prev[1] !== last_DATA_MEM_ADDR_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[1] = DATA_MEM_ADDR_expected_prev[1];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[2] !== 1'bx ) && ( DATA_MEM_ADDR_prev[2] !== DATA_MEM_ADDR_expected_prev[2] )
		&& ((DATA_MEM_ADDR_expected_prev[2] !== last_DATA_MEM_ADDR_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[2] = DATA_MEM_ADDR_expected_prev[2];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[3] !== 1'bx ) && ( DATA_MEM_ADDR_prev[3] !== DATA_MEM_ADDR_expected_prev[3] )
		&& ((DATA_MEM_ADDR_expected_prev[3] !== last_DATA_MEM_ADDR_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[3] = DATA_MEM_ADDR_expected_prev[3];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[4] !== 1'bx ) && ( DATA_MEM_ADDR_prev[4] !== DATA_MEM_ADDR_expected_prev[4] )
		&& ((DATA_MEM_ADDR_expected_prev[4] !== last_DATA_MEM_ADDR_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[4] = DATA_MEM_ADDR_expected_prev[4];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[5] !== 1'bx ) && ( DATA_MEM_ADDR_prev[5] !== DATA_MEM_ADDR_expected_prev[5] )
		&& ((DATA_MEM_ADDR_expected_prev[5] !== last_DATA_MEM_ADDR_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[5] = DATA_MEM_ADDR_expected_prev[5];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[6] !== 1'bx ) && ( DATA_MEM_ADDR_prev[6] !== DATA_MEM_ADDR_expected_prev[6] )
		&& ((DATA_MEM_ADDR_expected_prev[6] !== last_DATA_MEM_ADDR_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[6] = DATA_MEM_ADDR_expected_prev[6];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[7] !== 1'bx ) && ( DATA_MEM_ADDR_prev[7] !== DATA_MEM_ADDR_expected_prev[7] )
		&& ((DATA_MEM_ADDR_expected_prev[7] !== last_DATA_MEM_ADDR_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[7] = DATA_MEM_ADDR_expected_prev[7];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[8] !== 1'bx ) && ( DATA_MEM_ADDR_prev[8] !== DATA_MEM_ADDR_expected_prev[8] )
		&& ((DATA_MEM_ADDR_expected_prev[8] !== last_DATA_MEM_ADDR_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[8] = DATA_MEM_ADDR_expected_prev[8];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[9] !== 1'bx ) && ( DATA_MEM_ADDR_prev[9] !== DATA_MEM_ADDR_expected_prev[9] )
		&& ((DATA_MEM_ADDR_expected_prev[9] !== last_DATA_MEM_ADDR_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[9] = DATA_MEM_ADDR_expected_prev[9];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[10] !== 1'bx ) && ( DATA_MEM_ADDR_prev[10] !== DATA_MEM_ADDR_expected_prev[10] )
		&& ((DATA_MEM_ADDR_expected_prev[10] !== last_DATA_MEM_ADDR_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[10] = DATA_MEM_ADDR_expected_prev[10];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[11] !== 1'bx ) && ( DATA_MEM_ADDR_prev[11] !== DATA_MEM_ADDR_expected_prev[11] )
		&& ((DATA_MEM_ADDR_expected_prev[11] !== last_DATA_MEM_ADDR_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[11] = DATA_MEM_ADDR_expected_prev[11];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[12] !== 1'bx ) && ( DATA_MEM_ADDR_prev[12] !== DATA_MEM_ADDR_expected_prev[12] )
		&& ((DATA_MEM_ADDR_expected_prev[12] !== last_DATA_MEM_ADDR_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[12] = DATA_MEM_ADDR_expected_prev[12];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[13] !== 1'bx ) && ( DATA_MEM_ADDR_prev[13] !== DATA_MEM_ADDR_expected_prev[13] )
		&& ((DATA_MEM_ADDR_expected_prev[13] !== last_DATA_MEM_ADDR_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[13] = DATA_MEM_ADDR_expected_prev[13];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[14] !== 1'bx ) && ( DATA_MEM_ADDR_prev[14] !== DATA_MEM_ADDR_expected_prev[14] )
		&& ((DATA_MEM_ADDR_expected_prev[14] !== last_DATA_MEM_ADDR_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[14] = DATA_MEM_ADDR_expected_prev[14];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[15] !== 1'bx ) && ( DATA_MEM_ADDR_prev[15] !== DATA_MEM_ADDR_expected_prev[15] )
		&& ((DATA_MEM_ADDR_expected_prev[15] !== last_DATA_MEM_ADDR_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[15] = DATA_MEM_ADDR_expected_prev[15];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[16] !== 1'bx ) && ( DATA_MEM_ADDR_prev[16] !== DATA_MEM_ADDR_expected_prev[16] )
		&& ((DATA_MEM_ADDR_expected_prev[16] !== last_DATA_MEM_ADDR_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[16] = DATA_MEM_ADDR_expected_prev[16];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[17] !== 1'bx ) && ( DATA_MEM_ADDR_prev[17] !== DATA_MEM_ADDR_expected_prev[17] )
		&& ((DATA_MEM_ADDR_expected_prev[17] !== last_DATA_MEM_ADDR_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[17] = DATA_MEM_ADDR_expected_prev[17];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[18] !== 1'bx ) && ( DATA_MEM_ADDR_prev[18] !== DATA_MEM_ADDR_expected_prev[18] )
		&& ((DATA_MEM_ADDR_expected_prev[18] !== last_DATA_MEM_ADDR_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[18] = DATA_MEM_ADDR_expected_prev[18];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[19] !== 1'bx ) && ( DATA_MEM_ADDR_prev[19] !== DATA_MEM_ADDR_expected_prev[19] )
		&& ((DATA_MEM_ADDR_expected_prev[19] !== last_DATA_MEM_ADDR_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[19] = DATA_MEM_ADDR_expected_prev[19];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[20] !== 1'bx ) && ( DATA_MEM_ADDR_prev[20] !== DATA_MEM_ADDR_expected_prev[20] )
		&& ((DATA_MEM_ADDR_expected_prev[20] !== last_DATA_MEM_ADDR_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[20] = DATA_MEM_ADDR_expected_prev[20];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[21] !== 1'bx ) && ( DATA_MEM_ADDR_prev[21] !== DATA_MEM_ADDR_expected_prev[21] )
		&& ((DATA_MEM_ADDR_expected_prev[21] !== last_DATA_MEM_ADDR_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[21] = DATA_MEM_ADDR_expected_prev[21];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[22] !== 1'bx ) && ( DATA_MEM_ADDR_prev[22] !== DATA_MEM_ADDR_expected_prev[22] )
		&& ((DATA_MEM_ADDR_expected_prev[22] !== last_DATA_MEM_ADDR_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[22] = DATA_MEM_ADDR_expected_prev[22];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[23] !== 1'bx ) && ( DATA_MEM_ADDR_prev[23] !== DATA_MEM_ADDR_expected_prev[23] )
		&& ((DATA_MEM_ADDR_expected_prev[23] !== last_DATA_MEM_ADDR_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[23] = DATA_MEM_ADDR_expected_prev[23];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[24] !== 1'bx ) && ( DATA_MEM_ADDR_prev[24] !== DATA_MEM_ADDR_expected_prev[24] )
		&& ((DATA_MEM_ADDR_expected_prev[24] !== last_DATA_MEM_ADDR_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[24] = DATA_MEM_ADDR_expected_prev[24];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[25] !== 1'bx ) && ( DATA_MEM_ADDR_prev[25] !== DATA_MEM_ADDR_expected_prev[25] )
		&& ((DATA_MEM_ADDR_expected_prev[25] !== last_DATA_MEM_ADDR_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[25] = DATA_MEM_ADDR_expected_prev[25];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[26] !== 1'bx ) && ( DATA_MEM_ADDR_prev[26] !== DATA_MEM_ADDR_expected_prev[26] )
		&& ((DATA_MEM_ADDR_expected_prev[26] !== last_DATA_MEM_ADDR_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[26] = DATA_MEM_ADDR_expected_prev[26];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[27] !== 1'bx ) && ( DATA_MEM_ADDR_prev[27] !== DATA_MEM_ADDR_expected_prev[27] )
		&& ((DATA_MEM_ADDR_expected_prev[27] !== last_DATA_MEM_ADDR_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[27] = DATA_MEM_ADDR_expected_prev[27];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[28] !== 1'bx ) && ( DATA_MEM_ADDR_prev[28] !== DATA_MEM_ADDR_expected_prev[28] )
		&& ((DATA_MEM_ADDR_expected_prev[28] !== last_DATA_MEM_ADDR_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[28] = DATA_MEM_ADDR_expected_prev[28];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[29] !== 1'bx ) && ( DATA_MEM_ADDR_prev[29] !== DATA_MEM_ADDR_expected_prev[29] )
		&& ((DATA_MEM_ADDR_expected_prev[29] !== last_DATA_MEM_ADDR_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[29] = DATA_MEM_ADDR_expected_prev[29];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[30] !== 1'bx ) && ( DATA_MEM_ADDR_prev[30] !== DATA_MEM_ADDR_expected_prev[30] )
		&& ((DATA_MEM_ADDR_expected_prev[30] !== last_DATA_MEM_ADDR_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[30] = DATA_MEM_ADDR_expected_prev[30];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[31] !== 1'bx ) && ( DATA_MEM_ADDR_prev[31] !== DATA_MEM_ADDR_expected_prev[31] )
		&& ((DATA_MEM_ADDR_expected_prev[31] !== last_DATA_MEM_ADDR_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_exp[31] = DATA_MEM_ADDR_expected_prev[31];
	end
	if (
		( DATA_MEM_OUT_expected_prev[0] !== 1'bx ) && ( DATA_MEM_OUT_prev[0] !== DATA_MEM_OUT_expected_prev[0] )
		&& ((DATA_MEM_OUT_expected_prev[0] !== last_DATA_MEM_OUT_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[0] = DATA_MEM_OUT_expected_prev[0];
	end
	if (
		( DATA_MEM_OUT_expected_prev[1] !== 1'bx ) && ( DATA_MEM_OUT_prev[1] !== DATA_MEM_OUT_expected_prev[1] )
		&& ((DATA_MEM_OUT_expected_prev[1] !== last_DATA_MEM_OUT_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[1] = DATA_MEM_OUT_expected_prev[1];
	end
	if (
		( DATA_MEM_OUT_expected_prev[2] !== 1'bx ) && ( DATA_MEM_OUT_prev[2] !== DATA_MEM_OUT_expected_prev[2] )
		&& ((DATA_MEM_OUT_expected_prev[2] !== last_DATA_MEM_OUT_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[2] = DATA_MEM_OUT_expected_prev[2];
	end
	if (
		( DATA_MEM_OUT_expected_prev[3] !== 1'bx ) && ( DATA_MEM_OUT_prev[3] !== DATA_MEM_OUT_expected_prev[3] )
		&& ((DATA_MEM_OUT_expected_prev[3] !== last_DATA_MEM_OUT_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[3] = DATA_MEM_OUT_expected_prev[3];
	end
	if (
		( DATA_MEM_OUT_expected_prev[4] !== 1'bx ) && ( DATA_MEM_OUT_prev[4] !== DATA_MEM_OUT_expected_prev[4] )
		&& ((DATA_MEM_OUT_expected_prev[4] !== last_DATA_MEM_OUT_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[4] = DATA_MEM_OUT_expected_prev[4];
	end
	if (
		( DATA_MEM_OUT_expected_prev[5] !== 1'bx ) && ( DATA_MEM_OUT_prev[5] !== DATA_MEM_OUT_expected_prev[5] )
		&& ((DATA_MEM_OUT_expected_prev[5] !== last_DATA_MEM_OUT_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[5] = DATA_MEM_OUT_expected_prev[5];
	end
	if (
		( DATA_MEM_OUT_expected_prev[6] !== 1'bx ) && ( DATA_MEM_OUT_prev[6] !== DATA_MEM_OUT_expected_prev[6] )
		&& ((DATA_MEM_OUT_expected_prev[6] !== last_DATA_MEM_OUT_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[6] = DATA_MEM_OUT_expected_prev[6];
	end
	if (
		( DATA_MEM_OUT_expected_prev[7] !== 1'bx ) && ( DATA_MEM_OUT_prev[7] !== DATA_MEM_OUT_expected_prev[7] )
		&& ((DATA_MEM_OUT_expected_prev[7] !== last_DATA_MEM_OUT_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[7] = DATA_MEM_OUT_expected_prev[7];
	end
	if (
		( DATA_MEM_OUT_expected_prev[8] !== 1'bx ) && ( DATA_MEM_OUT_prev[8] !== DATA_MEM_OUT_expected_prev[8] )
		&& ((DATA_MEM_OUT_expected_prev[8] !== last_DATA_MEM_OUT_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[8] = DATA_MEM_OUT_expected_prev[8];
	end
	if (
		( DATA_MEM_OUT_expected_prev[9] !== 1'bx ) && ( DATA_MEM_OUT_prev[9] !== DATA_MEM_OUT_expected_prev[9] )
		&& ((DATA_MEM_OUT_expected_prev[9] !== last_DATA_MEM_OUT_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[9] = DATA_MEM_OUT_expected_prev[9];
	end
	if (
		( DATA_MEM_OUT_expected_prev[10] !== 1'bx ) && ( DATA_MEM_OUT_prev[10] !== DATA_MEM_OUT_expected_prev[10] )
		&& ((DATA_MEM_OUT_expected_prev[10] !== last_DATA_MEM_OUT_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[10] = DATA_MEM_OUT_expected_prev[10];
	end
	if (
		( DATA_MEM_OUT_expected_prev[11] !== 1'bx ) && ( DATA_MEM_OUT_prev[11] !== DATA_MEM_OUT_expected_prev[11] )
		&& ((DATA_MEM_OUT_expected_prev[11] !== last_DATA_MEM_OUT_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[11] = DATA_MEM_OUT_expected_prev[11];
	end
	if (
		( DATA_MEM_OUT_expected_prev[12] !== 1'bx ) && ( DATA_MEM_OUT_prev[12] !== DATA_MEM_OUT_expected_prev[12] )
		&& ((DATA_MEM_OUT_expected_prev[12] !== last_DATA_MEM_OUT_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[12] = DATA_MEM_OUT_expected_prev[12];
	end
	if (
		( DATA_MEM_OUT_expected_prev[13] !== 1'bx ) && ( DATA_MEM_OUT_prev[13] !== DATA_MEM_OUT_expected_prev[13] )
		&& ((DATA_MEM_OUT_expected_prev[13] !== last_DATA_MEM_OUT_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[13] = DATA_MEM_OUT_expected_prev[13];
	end
	if (
		( DATA_MEM_OUT_expected_prev[14] !== 1'bx ) && ( DATA_MEM_OUT_prev[14] !== DATA_MEM_OUT_expected_prev[14] )
		&& ((DATA_MEM_OUT_expected_prev[14] !== last_DATA_MEM_OUT_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[14] = DATA_MEM_OUT_expected_prev[14];
	end
	if (
		( DATA_MEM_OUT_expected_prev[15] !== 1'bx ) && ( DATA_MEM_OUT_prev[15] !== DATA_MEM_OUT_expected_prev[15] )
		&& ((DATA_MEM_OUT_expected_prev[15] !== last_DATA_MEM_OUT_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[15] = DATA_MEM_OUT_expected_prev[15];
	end
	if (
		( DATA_MEM_OUT_expected_prev[16] !== 1'bx ) && ( DATA_MEM_OUT_prev[16] !== DATA_MEM_OUT_expected_prev[16] )
		&& ((DATA_MEM_OUT_expected_prev[16] !== last_DATA_MEM_OUT_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[16] = DATA_MEM_OUT_expected_prev[16];
	end
	if (
		( DATA_MEM_OUT_expected_prev[17] !== 1'bx ) && ( DATA_MEM_OUT_prev[17] !== DATA_MEM_OUT_expected_prev[17] )
		&& ((DATA_MEM_OUT_expected_prev[17] !== last_DATA_MEM_OUT_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[17] = DATA_MEM_OUT_expected_prev[17];
	end
	if (
		( DATA_MEM_OUT_expected_prev[18] !== 1'bx ) && ( DATA_MEM_OUT_prev[18] !== DATA_MEM_OUT_expected_prev[18] )
		&& ((DATA_MEM_OUT_expected_prev[18] !== last_DATA_MEM_OUT_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[18] = DATA_MEM_OUT_expected_prev[18];
	end
	if (
		( DATA_MEM_OUT_expected_prev[19] !== 1'bx ) && ( DATA_MEM_OUT_prev[19] !== DATA_MEM_OUT_expected_prev[19] )
		&& ((DATA_MEM_OUT_expected_prev[19] !== last_DATA_MEM_OUT_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[19] = DATA_MEM_OUT_expected_prev[19];
	end
	if (
		( DATA_MEM_OUT_expected_prev[20] !== 1'bx ) && ( DATA_MEM_OUT_prev[20] !== DATA_MEM_OUT_expected_prev[20] )
		&& ((DATA_MEM_OUT_expected_prev[20] !== last_DATA_MEM_OUT_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[20] = DATA_MEM_OUT_expected_prev[20];
	end
	if (
		( DATA_MEM_OUT_expected_prev[21] !== 1'bx ) && ( DATA_MEM_OUT_prev[21] !== DATA_MEM_OUT_expected_prev[21] )
		&& ((DATA_MEM_OUT_expected_prev[21] !== last_DATA_MEM_OUT_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[21] = DATA_MEM_OUT_expected_prev[21];
	end
	if (
		( DATA_MEM_OUT_expected_prev[22] !== 1'bx ) && ( DATA_MEM_OUT_prev[22] !== DATA_MEM_OUT_expected_prev[22] )
		&& ((DATA_MEM_OUT_expected_prev[22] !== last_DATA_MEM_OUT_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[22] = DATA_MEM_OUT_expected_prev[22];
	end
	if (
		( DATA_MEM_OUT_expected_prev[23] !== 1'bx ) && ( DATA_MEM_OUT_prev[23] !== DATA_MEM_OUT_expected_prev[23] )
		&& ((DATA_MEM_OUT_expected_prev[23] !== last_DATA_MEM_OUT_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[23] = DATA_MEM_OUT_expected_prev[23];
	end
	if (
		( DATA_MEM_OUT_expected_prev[24] !== 1'bx ) && ( DATA_MEM_OUT_prev[24] !== DATA_MEM_OUT_expected_prev[24] )
		&& ((DATA_MEM_OUT_expected_prev[24] !== last_DATA_MEM_OUT_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[24] = DATA_MEM_OUT_expected_prev[24];
	end
	if (
		( DATA_MEM_OUT_expected_prev[25] !== 1'bx ) && ( DATA_MEM_OUT_prev[25] !== DATA_MEM_OUT_expected_prev[25] )
		&& ((DATA_MEM_OUT_expected_prev[25] !== last_DATA_MEM_OUT_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[25] = DATA_MEM_OUT_expected_prev[25];
	end
	if (
		( DATA_MEM_OUT_expected_prev[26] !== 1'bx ) && ( DATA_MEM_OUT_prev[26] !== DATA_MEM_OUT_expected_prev[26] )
		&& ((DATA_MEM_OUT_expected_prev[26] !== last_DATA_MEM_OUT_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[26] = DATA_MEM_OUT_expected_prev[26];
	end
	if (
		( DATA_MEM_OUT_expected_prev[27] !== 1'bx ) && ( DATA_MEM_OUT_prev[27] !== DATA_MEM_OUT_expected_prev[27] )
		&& ((DATA_MEM_OUT_expected_prev[27] !== last_DATA_MEM_OUT_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[27] = DATA_MEM_OUT_expected_prev[27];
	end
	if (
		( DATA_MEM_OUT_expected_prev[28] !== 1'bx ) && ( DATA_MEM_OUT_prev[28] !== DATA_MEM_OUT_expected_prev[28] )
		&& ((DATA_MEM_OUT_expected_prev[28] !== last_DATA_MEM_OUT_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[28] = DATA_MEM_OUT_expected_prev[28];
	end
	if (
		( DATA_MEM_OUT_expected_prev[29] !== 1'bx ) && ( DATA_MEM_OUT_prev[29] !== DATA_MEM_OUT_expected_prev[29] )
		&& ((DATA_MEM_OUT_expected_prev[29] !== last_DATA_MEM_OUT_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[29] = DATA_MEM_OUT_expected_prev[29];
	end
	if (
		( DATA_MEM_OUT_expected_prev[30] !== 1'bx ) && ( DATA_MEM_OUT_prev[30] !== DATA_MEM_OUT_expected_prev[30] )
		&& ((DATA_MEM_OUT_expected_prev[30] !== last_DATA_MEM_OUT_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[30] = DATA_MEM_OUT_expected_prev[30];
	end
	if (
		( DATA_MEM_OUT_expected_prev[31] !== 1'bx ) && ( DATA_MEM_OUT_prev[31] !== DATA_MEM_OUT_expected_prev[31] )
		&& ((DATA_MEM_OUT_expected_prev[31] !== last_DATA_MEM_OUT_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_OUT_exp[31] = DATA_MEM_OUT_expected_prev[31];
	end
	if (
		( DATA_MEM_write_enable_expected_prev !== 1'bx ) && ( DATA_MEM_write_enable_prev !== DATA_MEM_write_enable_expected_prev )
		&& ((DATA_MEM_write_enable_expected_prev !== last_DATA_MEM_write_enable_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_write_enable :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_write_enable_expected_prev);
		$display ("     Real value = %b", DATA_MEM_write_enable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_MEM_write_enable_exp = DATA_MEM_write_enable_expected_prev;
	end
	if (
		( MBR_OUT_expected_prev[0] !== 1'bx ) && ( MBR_OUT_prev[0] !== MBR_OUT_expected_prev[0] )
		&& ((MBR_OUT_expected_prev[0] !== last_MBR_OUT_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MBR_OUT_exp[0] = MBR_OUT_expected_prev[0];
	end
	if (
		( MBR_OUT_expected_prev[1] !== 1'bx ) && ( MBR_OUT_prev[1] !== MBR_OUT_expected_prev[1] )
		&& ((MBR_OUT_expected_prev[1] !== last_MBR_OUT_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MBR_OUT_exp[1] = MBR_OUT_expected_prev[1];
	end
	if (
		( MBR_OUT_expected_prev[2] !== 1'bx ) && ( MBR_OUT_prev[2] !== MBR_OUT_expected_prev[2] )
		&& ((MBR_OUT_expected_prev[2] !== last_MBR_OUT_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MBR_OUT_exp[2] = MBR_OUT_expected_prev[2];
	end
	if (
		( MBR_OUT_expected_prev[3] !== 1'bx ) && ( MBR_OUT_prev[3] !== MBR_OUT_expected_prev[3] )
		&& ((MBR_OUT_expected_prev[3] !== last_MBR_OUT_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MBR_OUT_exp[3] = MBR_OUT_expected_prev[3];
	end
	if (
		( MBR_OUT_expected_prev[4] !== 1'bx ) && ( MBR_OUT_prev[4] !== MBR_OUT_expected_prev[4] )
		&& ((MBR_OUT_expected_prev[4] !== last_MBR_OUT_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MBR_OUT_exp[4] = MBR_OUT_expected_prev[4];
	end
	if (
		( MBR_OUT_expected_prev[5] !== 1'bx ) && ( MBR_OUT_prev[5] !== MBR_OUT_expected_prev[5] )
		&& ((MBR_OUT_expected_prev[5] !== last_MBR_OUT_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MBR_OUT_exp[5] = MBR_OUT_expected_prev[5];
	end
	if (
		( MBR_OUT_expected_prev[6] !== 1'bx ) && ( MBR_OUT_prev[6] !== MBR_OUT_expected_prev[6] )
		&& ((MBR_OUT_expected_prev[6] !== last_MBR_OUT_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MBR_OUT_exp[6] = MBR_OUT_expected_prev[6];
	end
	if (
		( MBR_OUT_expected_prev[7] !== 1'bx ) && ( MBR_OUT_prev[7] !== MBR_OUT_expected_prev[7] )
		&& ((MBR_OUT_expected_prev[7] !== last_MBR_OUT_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MBR_OUT_exp[7] = MBR_OUT_expected_prev[7];
	end
	if (
		( MIR_expected_prev[0] !== 1'bx ) && ( MIR_prev[0] !== MIR_expected_prev[0] )
		&& ((MIR_expected_prev[0] !== last_MIR_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[0] = MIR_expected_prev[0];
	end
	if (
		( MIR_expected_prev[1] !== 1'bx ) && ( MIR_prev[1] !== MIR_expected_prev[1] )
		&& ((MIR_expected_prev[1] !== last_MIR_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[1] = MIR_expected_prev[1];
	end
	if (
		( MIR_expected_prev[2] !== 1'bx ) && ( MIR_prev[2] !== MIR_expected_prev[2] )
		&& ((MIR_expected_prev[2] !== last_MIR_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[2] = MIR_expected_prev[2];
	end
	if (
		( MIR_expected_prev[3] !== 1'bx ) && ( MIR_prev[3] !== MIR_expected_prev[3] )
		&& ((MIR_expected_prev[3] !== last_MIR_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[3] = MIR_expected_prev[3];
	end
	if (
		( MIR_expected_prev[4] !== 1'bx ) && ( MIR_prev[4] !== MIR_expected_prev[4] )
		&& ((MIR_expected_prev[4] !== last_MIR_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[4] = MIR_expected_prev[4];
	end
	if (
		( MIR_expected_prev[5] !== 1'bx ) && ( MIR_prev[5] !== MIR_expected_prev[5] )
		&& ((MIR_expected_prev[5] !== last_MIR_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[5] = MIR_expected_prev[5];
	end
	if (
		( MIR_expected_prev[6] !== 1'bx ) && ( MIR_prev[6] !== MIR_expected_prev[6] )
		&& ((MIR_expected_prev[6] !== last_MIR_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[6] = MIR_expected_prev[6];
	end
	if (
		( MIR_expected_prev[7] !== 1'bx ) && ( MIR_prev[7] !== MIR_expected_prev[7] )
		&& ((MIR_expected_prev[7] !== last_MIR_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[7] = MIR_expected_prev[7];
	end
	if (
		( MIR_expected_prev[8] !== 1'bx ) && ( MIR_prev[8] !== MIR_expected_prev[8] )
		&& ((MIR_expected_prev[8] !== last_MIR_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[8] = MIR_expected_prev[8];
	end
	if (
		( MIR_expected_prev[9] !== 1'bx ) && ( MIR_prev[9] !== MIR_expected_prev[9] )
		&& ((MIR_expected_prev[9] !== last_MIR_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[9] = MIR_expected_prev[9];
	end
	if (
		( MIR_expected_prev[10] !== 1'bx ) && ( MIR_prev[10] !== MIR_expected_prev[10] )
		&& ((MIR_expected_prev[10] !== last_MIR_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[10] = MIR_expected_prev[10];
	end
	if (
		( MIR_expected_prev[11] !== 1'bx ) && ( MIR_prev[11] !== MIR_expected_prev[11] )
		&& ((MIR_expected_prev[11] !== last_MIR_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[11] = MIR_expected_prev[11];
	end
	if (
		( MIR_expected_prev[12] !== 1'bx ) && ( MIR_prev[12] !== MIR_expected_prev[12] )
		&& ((MIR_expected_prev[12] !== last_MIR_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[12] = MIR_expected_prev[12];
	end
	if (
		( MIR_expected_prev[13] !== 1'bx ) && ( MIR_prev[13] !== MIR_expected_prev[13] )
		&& ((MIR_expected_prev[13] !== last_MIR_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[13] = MIR_expected_prev[13];
	end
	if (
		( MIR_expected_prev[14] !== 1'bx ) && ( MIR_prev[14] !== MIR_expected_prev[14] )
		&& ((MIR_expected_prev[14] !== last_MIR_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[14] = MIR_expected_prev[14];
	end
	if (
		( MIR_expected_prev[15] !== 1'bx ) && ( MIR_prev[15] !== MIR_expected_prev[15] )
		&& ((MIR_expected_prev[15] !== last_MIR_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[15] = MIR_expected_prev[15];
	end
	if (
		( MIR_expected_prev[16] !== 1'bx ) && ( MIR_prev[16] !== MIR_expected_prev[16] )
		&& ((MIR_expected_prev[16] !== last_MIR_exp[16]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[16] = MIR_expected_prev[16];
	end
	if (
		( MIR_expected_prev[17] !== 1'bx ) && ( MIR_prev[17] !== MIR_expected_prev[17] )
		&& ((MIR_expected_prev[17] !== last_MIR_exp[17]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[17] = MIR_expected_prev[17];
	end
	if (
		( MIR_expected_prev[18] !== 1'bx ) && ( MIR_prev[18] !== MIR_expected_prev[18] )
		&& ((MIR_expected_prev[18] !== last_MIR_exp[18]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[18] = MIR_expected_prev[18];
	end
	if (
		( MIR_expected_prev[19] !== 1'bx ) && ( MIR_prev[19] !== MIR_expected_prev[19] )
		&& ((MIR_expected_prev[19] !== last_MIR_exp[19]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[19] = MIR_expected_prev[19];
	end
	if (
		( MIR_expected_prev[20] !== 1'bx ) && ( MIR_prev[20] !== MIR_expected_prev[20] )
		&& ((MIR_expected_prev[20] !== last_MIR_exp[20]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[20] = MIR_expected_prev[20];
	end
	if (
		( MIR_expected_prev[21] !== 1'bx ) && ( MIR_prev[21] !== MIR_expected_prev[21] )
		&& ((MIR_expected_prev[21] !== last_MIR_exp[21]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[21] = MIR_expected_prev[21];
	end
	if (
		( MIR_expected_prev[22] !== 1'bx ) && ( MIR_prev[22] !== MIR_expected_prev[22] )
		&& ((MIR_expected_prev[22] !== last_MIR_exp[22]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[22] = MIR_expected_prev[22];
	end
	if (
		( MIR_expected_prev[23] !== 1'bx ) && ( MIR_prev[23] !== MIR_expected_prev[23] )
		&& ((MIR_expected_prev[23] !== last_MIR_exp[23]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[23] = MIR_expected_prev[23];
	end
	if (
		( MIR_expected_prev[24] !== 1'bx ) && ( MIR_prev[24] !== MIR_expected_prev[24] )
		&& ((MIR_expected_prev[24] !== last_MIR_exp[24]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[24] = MIR_expected_prev[24];
	end
	if (
		( MIR_expected_prev[25] !== 1'bx ) && ( MIR_prev[25] !== MIR_expected_prev[25] )
		&& ((MIR_expected_prev[25] !== last_MIR_exp[25]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[25] = MIR_expected_prev[25];
	end
	if (
		( MIR_expected_prev[26] !== 1'bx ) && ( MIR_prev[26] !== MIR_expected_prev[26] )
		&& ((MIR_expected_prev[26] !== last_MIR_exp[26]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[26] = MIR_expected_prev[26];
	end
	if (
		( MIR_expected_prev[27] !== 1'bx ) && ( MIR_prev[27] !== MIR_expected_prev[27] )
		&& ((MIR_expected_prev[27] !== last_MIR_exp[27]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[27] = MIR_expected_prev[27];
	end
	if (
		( MIR_expected_prev[28] !== 1'bx ) && ( MIR_prev[28] !== MIR_expected_prev[28] )
		&& ((MIR_expected_prev[28] !== last_MIR_exp[28]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[28] = MIR_expected_prev[28];
	end
	if (
		( MIR_expected_prev[29] !== 1'bx ) && ( MIR_prev[29] !== MIR_expected_prev[29] )
		&& ((MIR_expected_prev[29] !== last_MIR_exp[29]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[29] = MIR_expected_prev[29];
	end
	if (
		( MIR_expected_prev[30] !== 1'bx ) && ( MIR_prev[30] !== MIR_expected_prev[30] )
		&& ((MIR_expected_prev[30] !== last_MIR_exp[30]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[30] = MIR_expected_prev[30];
	end
	if (
		( MIR_expected_prev[31] !== 1'bx ) && ( MIR_prev[31] !== MIR_expected_prev[31] )
		&& ((MIR_expected_prev[31] !== last_MIR_exp[31]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[31] = MIR_expected_prev[31];
	end
	if (
		( MIR_expected_prev[32] !== 1'bx ) && ( MIR_prev[32] !== MIR_expected_prev[32] )
		&& ((MIR_expected_prev[32] !== last_MIR_exp[32]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[32] = MIR_expected_prev[32];
	end
	if (
		( MIR_expected_prev[33] !== 1'bx ) && ( MIR_prev[33] !== MIR_expected_prev[33] )
		&& ((MIR_expected_prev[33] !== last_MIR_exp[33]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[33] = MIR_expected_prev[33];
	end
	if (
		( MIR_expected_prev[34] !== 1'bx ) && ( MIR_prev[34] !== MIR_expected_prev[34] )
		&& ((MIR_expected_prev[34] !== last_MIR_exp[34]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[34] = MIR_expected_prev[34];
	end
	if (
		( MIR_expected_prev[35] !== 1'bx ) && ( MIR_prev[35] !== MIR_expected_prev[35] )
		&& ((MIR_expected_prev[35] !== last_MIR_exp[35]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MIR_exp[35] = MIR_expected_prev[35];
	end
	if (
		( MPC_expected_prev[0] !== 1'bx ) && ( MPC_prev[0] !== MPC_expected_prev[0] )
		&& ((MPC_expected_prev[0] !== last_MPC_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_MPC_exp[0] = MPC_expected_prev[0];
	end
	if (
		( MPC_expected_prev[1] !== 1'bx ) && ( MPC_prev[1] !== MPC_expected_prev[1] )
		&& ((MPC_expected_prev[1] !== last_MPC_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_MPC_exp[1] = MPC_expected_prev[1];
	end
	if (
		( MPC_expected_prev[2] !== 1'bx ) && ( MPC_prev[2] !== MPC_expected_prev[2] )
		&& ((MPC_expected_prev[2] !== last_MPC_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_MPC_exp[2] = MPC_expected_prev[2];
	end
	if (
		( MPC_expected_prev[3] !== 1'bx ) && ( MPC_prev[3] !== MPC_expected_prev[3] )
		&& ((MPC_expected_prev[3] !== last_MPC_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_MPC_exp[3] = MPC_expected_prev[3];
	end
	if (
		( MPC_expected_prev[4] !== 1'bx ) && ( MPC_prev[4] !== MPC_expected_prev[4] )
		&& ((MPC_expected_prev[4] !== last_MPC_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_MPC_exp[4] = MPC_expected_prev[4];
	end
	if (
		( MPC_expected_prev[5] !== 1'bx ) && ( MPC_prev[5] !== MPC_expected_prev[5] )
		&& ((MPC_expected_prev[5] !== last_MPC_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_MPC_exp[5] = MPC_expected_prev[5];
	end
	if (
		( MPC_expected_prev[6] !== 1'bx ) && ( MPC_prev[6] !== MPC_expected_prev[6] )
		&& ((MPC_expected_prev[6] !== last_MPC_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_MPC_exp[6] = MPC_expected_prev[6];
	end
	if (
		( MPC_expected_prev[7] !== 1'bx ) && ( MPC_prev[7] !== MPC_expected_prev[7] )
		&& ((MPC_expected_prev[7] !== last_MPC_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_MPC_exp[7] = MPC_expected_prev[7];
	end
	if (
		( MPC_expected_prev[8] !== 1'bx ) && ( MPC_prev[8] !== MPC_expected_prev[8] )
		&& ((MPC_expected_prev[8] !== last_MPC_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_MPC_exp[8] = MPC_expected_prev[8];
	end
	if (
		( PC_expected_prev[0] !== 1'bx ) && ( PC_prev[0] !== PC_expected_prev[0] )
		&& ((PC_expected_prev[0] !== last_PC_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[0] = PC_expected_prev[0];
	end
	if (
		( PC_expected_prev[1] !== 1'bx ) && ( PC_prev[1] !== PC_expected_prev[1] )
		&& ((PC_expected_prev[1] !== last_PC_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[1] = PC_expected_prev[1];
	end
	if (
		( PC_expected_prev[2] !== 1'bx ) && ( PC_prev[2] !== PC_expected_prev[2] )
		&& ((PC_expected_prev[2] !== last_PC_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[2] = PC_expected_prev[2];
	end
	if (
		( PC_expected_prev[3] !== 1'bx ) && ( PC_prev[3] !== PC_expected_prev[3] )
		&& ((PC_expected_prev[3] !== last_PC_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[3] = PC_expected_prev[3];
	end
	if (
		( PC_expected_prev[4] !== 1'bx ) && ( PC_prev[4] !== PC_expected_prev[4] )
		&& ((PC_expected_prev[4] !== last_PC_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[4] = PC_expected_prev[4];
	end
	if (
		( PC_expected_prev[5] !== 1'bx ) && ( PC_prev[5] !== PC_expected_prev[5] )
		&& ((PC_expected_prev[5] !== last_PC_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[5] = PC_expected_prev[5];
	end
	if (
		( PC_expected_prev[6] !== 1'bx ) && ( PC_prev[6] !== PC_expected_prev[6] )
		&& ((PC_expected_prev[6] !== last_PC_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[6] = PC_expected_prev[6];
	end
	if (
		( PC_expected_prev[7] !== 1'bx ) && ( PC_prev[7] !== PC_expected_prev[7] )
		&& ((PC_expected_prev[7] !== last_PC_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[7] = PC_expected_prev[7];
	end
	if (
		( PC_expected_prev[8] !== 1'bx ) && ( PC_prev[8] !== PC_expected_prev[8] )
		&& ((PC_expected_prev[8] !== last_PC_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[8] = PC_expected_prev[8];
	end
	if (
		( PC_expected_prev[9] !== 1'bx ) && ( PC_prev[9] !== PC_expected_prev[9] )
		&& ((PC_expected_prev[9] !== last_PC_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[9] = PC_expected_prev[9];
	end
	if (
		( PC_expected_prev[10] !== 1'bx ) && ( PC_prev[10] !== PC_expected_prev[10] )
		&& ((PC_expected_prev[10] !== last_PC_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[10] = PC_expected_prev[10];
	end
	if (
		( PC_expected_prev[11] !== 1'bx ) && ( PC_prev[11] !== PC_expected_prev[11] )
		&& ((PC_expected_prev[11] !== last_PC_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[11] = PC_expected_prev[11];
	end
	if (
		( PC_expected_prev[12] !== 1'bx ) && ( PC_prev[12] !== PC_expected_prev[12] )
		&& ((PC_expected_prev[12] !== last_PC_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[12] = PC_expected_prev[12];
	end
	if (
		( PC_expected_prev[13] !== 1'bx ) && ( PC_prev[13] !== PC_expected_prev[13] )
		&& ((PC_expected_prev[13] !== last_PC_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[13] = PC_expected_prev[13];
	end
	if (
		( PC_expected_prev[14] !== 1'bx ) && ( PC_prev[14] !== PC_expected_prev[14] )
		&& ((PC_expected_prev[14] !== last_PC_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[14] = PC_expected_prev[14];
	end
	if (
		( PC_expected_prev[15] !== 1'bx ) && ( PC_prev[15] !== PC_expected_prev[15] )
		&& ((PC_expected_prev[15] !== last_PC_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[15] = PC_expected_prev[15];
	end
	if (
		( PC_expected_prev[16] !== 1'bx ) && ( PC_prev[16] !== PC_expected_prev[16] )
		&& ((PC_expected_prev[16] !== last_PC_exp[16]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[16] = PC_expected_prev[16];
	end
	if (
		( PC_expected_prev[17] !== 1'bx ) && ( PC_prev[17] !== PC_expected_prev[17] )
		&& ((PC_expected_prev[17] !== last_PC_exp[17]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[17] = PC_expected_prev[17];
	end
	if (
		( PC_expected_prev[18] !== 1'bx ) && ( PC_prev[18] !== PC_expected_prev[18] )
		&& ((PC_expected_prev[18] !== last_PC_exp[18]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[18] = PC_expected_prev[18];
	end
	if (
		( PC_expected_prev[19] !== 1'bx ) && ( PC_prev[19] !== PC_expected_prev[19] )
		&& ((PC_expected_prev[19] !== last_PC_exp[19]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[19] = PC_expected_prev[19];
	end
	if (
		( PC_expected_prev[20] !== 1'bx ) && ( PC_prev[20] !== PC_expected_prev[20] )
		&& ((PC_expected_prev[20] !== last_PC_exp[20]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[20] = PC_expected_prev[20];
	end
	if (
		( PC_expected_prev[21] !== 1'bx ) && ( PC_prev[21] !== PC_expected_prev[21] )
		&& ((PC_expected_prev[21] !== last_PC_exp[21]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[21] = PC_expected_prev[21];
	end
	if (
		( PC_expected_prev[22] !== 1'bx ) && ( PC_prev[22] !== PC_expected_prev[22] )
		&& ((PC_expected_prev[22] !== last_PC_exp[22]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[22] = PC_expected_prev[22];
	end
	if (
		( PC_expected_prev[23] !== 1'bx ) && ( PC_prev[23] !== PC_expected_prev[23] )
		&& ((PC_expected_prev[23] !== last_PC_exp[23]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[23] = PC_expected_prev[23];
	end
	if (
		( PC_expected_prev[24] !== 1'bx ) && ( PC_prev[24] !== PC_expected_prev[24] )
		&& ((PC_expected_prev[24] !== last_PC_exp[24]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[24] = PC_expected_prev[24];
	end
	if (
		( PC_expected_prev[25] !== 1'bx ) && ( PC_prev[25] !== PC_expected_prev[25] )
		&& ((PC_expected_prev[25] !== last_PC_exp[25]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[25] = PC_expected_prev[25];
	end
	if (
		( PC_expected_prev[26] !== 1'bx ) && ( PC_prev[26] !== PC_expected_prev[26] )
		&& ((PC_expected_prev[26] !== last_PC_exp[26]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[26] = PC_expected_prev[26];
	end
	if (
		( PC_expected_prev[27] !== 1'bx ) && ( PC_prev[27] !== PC_expected_prev[27] )
		&& ((PC_expected_prev[27] !== last_PC_exp[27]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[27] = PC_expected_prev[27];
	end
	if (
		( PC_expected_prev[28] !== 1'bx ) && ( PC_prev[28] !== PC_expected_prev[28] )
		&& ((PC_expected_prev[28] !== last_PC_exp[28]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[28] = PC_expected_prev[28];
	end
	if (
		( PC_expected_prev[29] !== 1'bx ) && ( PC_prev[29] !== PC_expected_prev[29] )
		&& ((PC_expected_prev[29] !== last_PC_exp[29]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[29] = PC_expected_prev[29];
	end
	if (
		( PC_expected_prev[30] !== 1'bx ) && ( PC_prev[30] !== PC_expected_prev[30] )
		&& ((PC_expected_prev[30] !== last_PC_exp[30]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[30] = PC_expected_prev[30];
	end
	if (
		( PC_expected_prev[31] !== 1'bx ) && ( PC_prev[31] !== PC_expected_prev[31] )
		&& ((PC_expected_prev[31] !== last_PC_exp[31]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_exp[31] = PC_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#2000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg [31:0] DATA_MEM_IN;
reg LOADN;
reg [7:0] PROG_MEM_IN;
// wires                                               
wire [31:0] A;
wire [31:0] B;
wire [31:0] C;
wire [31:0] DATA_MEM_ADDR;
wire [31:0] DATA_MEM_OUT;
wire DATA_MEM_write_enable;
wire [7:0] MBR_OUT;
wire [35:0] MIR;
wire [8:0] MPC;
wire [31:0] PC;

wire sampler;                             

// assign statements (if any)                          
CPU i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.CLOCK(CLOCK),
	.DATA_MEM_ADDR(DATA_MEM_ADDR),
	.DATA_MEM_IN(DATA_MEM_IN),
	.DATA_MEM_OUT(DATA_MEM_OUT),
	.DATA_MEM_write_enable(DATA_MEM_write_enable),
	.LOADN(LOADN),
	.MBR_OUT(MBR_OUT),
	.MIR(MIR),
	.MPC(MPC),
	.PC(PC),
	.PROG_MEM_IN(PROG_MEM_IN)
);

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #80000 1'b1;
	#20000;
end 

// LOADN
initial
begin
	LOADN = 1'b1;
	LOADN = #10000 1'b0;
end 
// PROG_MEM_IN[ 7 ]
initial
begin
	PROG_MEM_IN[7] = 1'b1;
	PROG_MEM_IN[7] = #210000 1'b0;
	PROG_MEM_IN[7] = #410000 1'b1;
	PROG_MEM_IN[7] = #800000 1'b0;
end 
// PROG_MEM_IN[ 6 ]
initial
begin
	PROG_MEM_IN[6] = 1'b1;
	PROG_MEM_IN[6] = #210000 1'b0;
	PROG_MEM_IN[6] = #610000 1'b1;
	PROG_MEM_IN[6] = #900000 1'b0;
end 
// PROG_MEM_IN[ 5 ]
initial
begin
	PROG_MEM_IN[5] = 1'b1;
	PROG_MEM_IN[5] = #210000 1'b0;
	PROG_MEM_IN[5] = #610000 1'b1;
	PROG_MEM_IN[5] = #600000 1'b0;
end 
// PROG_MEM_IN[ 4 ]
initial
begin
	PROG_MEM_IN[4] = 1'b1;
	PROG_MEM_IN[4] = #420000 1'b0;
	PROG_MEM_IN[4] = #200000 1'b1;
	PROG_MEM_IN[4] = #1100000 1'b0;
end 
// PROG_MEM_IN[ 3 ]
initial
begin
	PROG_MEM_IN[3] = 1'b1;
	PROG_MEM_IN[3] = #210000 1'b0;
	PROG_MEM_IN[3] = #410000 1'b1;
	PROG_MEM_IN[3] = #1100000 1'b0;
end 
// PROG_MEM_IN[ 2 ]
initial
begin
	PROG_MEM_IN[2] = 1'b1;
	PROG_MEM_IN[2] = #210000 1'b0;
	PROG_MEM_IN[2] = #610000 1'b1;
	PROG_MEM_IN[2] = #600000 1'b0;
end 
// PROG_MEM_IN[ 1 ]
initial
begin
	PROG_MEM_IN[1] = 1'b1;
	PROG_MEM_IN[1] = #210000 1'b0;
	PROG_MEM_IN[1] = #610000 1'b1;
	PROG_MEM_IN[1] = #900000 1'b0;
end 
// PROG_MEM_IN[ 0 ]
initial
begin
	PROG_MEM_IN[0] = 1'b1;
	PROG_MEM_IN[0] = #210000 1'b0;
	PROG_MEM_IN[0] = #410000 1'b1;
	PROG_MEM_IN[0] = #800000 1'b0;
end 
// DATA_MEM_IN[ 31 ]
initial
begin
	DATA_MEM_IN[31] = 1'b0;
end 
// DATA_MEM_IN[ 30 ]
initial
begin
	DATA_MEM_IN[30] = 1'b0;
end 
// DATA_MEM_IN[ 29 ]
initial
begin
	DATA_MEM_IN[29] = 1'b0;
end 
// DATA_MEM_IN[ 28 ]
initial
begin
	DATA_MEM_IN[28] = 1'b0;
end 
// DATA_MEM_IN[ 27 ]
initial
begin
	DATA_MEM_IN[27] = 1'b0;
end 
// DATA_MEM_IN[ 26 ]
initial
begin
	DATA_MEM_IN[26] = 1'b0;
end 
// DATA_MEM_IN[ 25 ]
initial
begin
	DATA_MEM_IN[25] = 1'b0;
end 
// DATA_MEM_IN[ 24 ]
initial
begin
	DATA_MEM_IN[24] = 1'b0;
end 
// DATA_MEM_IN[ 23 ]
initial
begin
	DATA_MEM_IN[23] = 1'b0;
end 
// DATA_MEM_IN[ 22 ]
initial
begin
	DATA_MEM_IN[22] = 1'b0;
end 
// DATA_MEM_IN[ 21 ]
initial
begin
	DATA_MEM_IN[21] = 1'b0;
end 
// DATA_MEM_IN[ 20 ]
initial
begin
	DATA_MEM_IN[20] = 1'b0;
end 
// DATA_MEM_IN[ 19 ]
initial
begin
	DATA_MEM_IN[19] = 1'b0;
end 
// DATA_MEM_IN[ 18 ]
initial
begin
	DATA_MEM_IN[18] = 1'b0;
end 
// DATA_MEM_IN[ 17 ]
initial
begin
	DATA_MEM_IN[17] = 1'b0;
end 
// DATA_MEM_IN[ 16 ]
initial
begin
	DATA_MEM_IN[16] = 1'b0;
end 
// DATA_MEM_IN[ 15 ]
initial
begin
	DATA_MEM_IN[15] = 1'b0;
end 
// DATA_MEM_IN[ 14 ]
initial
begin
	DATA_MEM_IN[14] = 1'b0;
end 
// DATA_MEM_IN[ 13 ]
initial
begin
	DATA_MEM_IN[13] = 1'b0;
end 
// DATA_MEM_IN[ 12 ]
initial
begin
	DATA_MEM_IN[12] = 1'b0;
end 
// DATA_MEM_IN[ 11 ]
initial
begin
	DATA_MEM_IN[11] = 1'b0;
end 
// DATA_MEM_IN[ 10 ]
initial
begin
	DATA_MEM_IN[10] = 1'b0;
end 
// DATA_MEM_IN[ 9 ]
initial
begin
	DATA_MEM_IN[9] = 1'b0;
end 
// DATA_MEM_IN[ 8 ]
initial
begin
	DATA_MEM_IN[8] = 1'b0;
end 
// DATA_MEM_IN[ 7 ]
initial
begin
	DATA_MEM_IN[7] = 1'b0;
end 
// DATA_MEM_IN[ 6 ]
initial
begin
	DATA_MEM_IN[6] = 1'b0;
end 
// DATA_MEM_IN[ 5 ]
initial
begin
	DATA_MEM_IN[5] = 1'b0;
end 
// DATA_MEM_IN[ 4 ]
initial
begin
	DATA_MEM_IN[4] = 1'b0;
end 
// DATA_MEM_IN[ 3 ]
initial
begin
	DATA_MEM_IN[3] = 1'b0;
end 
// DATA_MEM_IN[ 2 ]
initial
begin
	DATA_MEM_IN[2] = 1'b0;
end 
// DATA_MEM_IN[ 1 ]
initial
begin
	DATA_MEM_IN[1] = 1'b0;
end 
// DATA_MEM_IN[ 0 ]
initial
begin
	DATA_MEM_IN[0] = 1'b0;
end 

CPU_vlg_sample_tst tb_sample (
	.CLOCK(CLOCK),
	.DATA_MEM_IN(DATA_MEM_IN),
	.LOADN(LOADN),
	.PROG_MEM_IN(PROG_MEM_IN),
	.sampler_tx(sampler)
);

CPU_vlg_check_tst tb_out(
	.A(A),
	.B(B),
	.C(C),
	.DATA_MEM_ADDR(DATA_MEM_ADDR),
	.DATA_MEM_OUT(DATA_MEM_OUT),
	.DATA_MEM_write_enable(DATA_MEM_write_enable),
	.MBR_OUT(MBR_OUT),
	.MIR(MIR),
	.MPC(MPC),
	.PC(PC),
	.sampler_rx(sampler)
);
endmodule

